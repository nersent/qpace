# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import datetime
import typing

class Ohlcv:
    timeframe: Timeframe
    def __new__(cls,): ...
    @staticmethod
    def from_bars(bars:typing.Sequence[OhlcvBar]) -> Ohlcv:
        ...

    def py_set_timeframe(self, timeframe:Timeframe) -> None:
        ...

    def __getitem__(self, index:builtins.int) -> typing.Optional[OhlcvBar]:
        ...

    def __len__(self) -> builtins.int:
        ...

    def slice(self, slice:slice) -> builtins.list[OhlcvBar]:
        ...

    def copy(self) -> Ohlcv:
        ...

    def extend(self, other:Ohlcv) -> None:
        ...

    def head(self, n:builtins.int) -> builtins.list[OhlcvBar]:
        ...

    def tail(self, n:builtins.int) -> builtins.list[OhlcvBar]:
        ...

    def resample(self, timeframe:Timeframe, align_utc:builtins.bool) -> Ohlcv:
        ...

    def sort(self, ascending:builtins.bool) -> None:
        ...

    def clear(self) -> None:
        ...

    def pop(self) -> typing.Optional[OhlcvBar]:
        ...

    def shift(self) -> typing.Optional[OhlcvBar]:
        ...

    def push(self, bar:OhlcvBar) -> None:
        ...

    def push_many(self, bars:typing.Sequence[OhlcvBar]) -> None:
        ...

    @staticmethod
    def from_pandas(df:typing.Any) -> Ohlcv:
        ...

    def to_pandas(self) -> typing.Any:
        ...

    @staticmethod
    def read_csv(path:builtins.str) -> Ohlcv:
        ...

    @staticmethod
    def read_parquet(path:builtins.str) -> Ohlcv:
        ...

    def write_csv(self, path:builtins.str) -> None:
        ...

    def write_parquet(self, path:builtins.str) -> None:
        ...

    def sanity_check(self) -> tuple[builtins.bool, builtins.list[builtins.str]]:
        ...


class OhlcvBar:
    open_time: datetime.datetime
    close_time: datetime.datetime
    open: builtins.float
    high: builtins.float
    low: builtins.float
    close: builtins.float
    volume: builtins.float
    def __new__(cls,open_time:typing.Optional[datetime.datetime]=None, close_time:typing.Optional[datetime.datetime]=None, open:typing.Optional[builtins.float]=None, high:typing.Optional[builtins.float]=None, low:typing.Optional[builtins.float]=None, close:typing.Optional[builtins.float]=None, volume:typing.Optional[builtins.float]=None): ...
    def __str__(self) -> builtins.str:
        ...

    def __repr__(self) -> builtins.str:
        ...

    def py_set_open_time(self, open_time:datetime.datetime) -> None:
        ...

    def py_set_close_time(self, close_time:datetime.datetime) -> None:
        ...

    def py_set_open(self, open:builtins.float) -> None:
        ...

    def py_set_high(self, high:builtins.float) -> None:
        ...

    def py_set_low(self, low:builtins.float) -> None:
        ...

    def py_set_close(self, close:builtins.float) -> None:
        ...

    def py_set_volume(self, volume:builtins.float) -> None:
        ...

    def merge(self, other:OhlcvBar) -> OhlcvBar:
        ...

    def to_dict(self) -> typing.Any:
        ...

    @staticmethod
    def from_dict(obj:typing.Any) -> OhlcvBar:
        ...


class Sym:
    id: typing.Optional[builtins.str]
    ticker_id: typing.Optional[builtins.str]
    kind: SymKind
    min_tick: builtins.float
    min_qty: builtins.float
    prefix: typing.Optional[builtins.str]
    currency: typing.Optional[builtins.str]
    base_currency: typing.Optional[builtins.str]
    ticker: typing.Optional[builtins.str]
    country: typing.Optional[builtins.str]
    price_scale: builtins.float
    point_value: builtins.float
    metadata: typing.Optional[builtins.str]
    def __new__(cls,): ...
    def __str__(self) -> builtins.str:
        ...

    def __repr__(self) -> builtins.str:
        ...

    def py_set_id(self, id:typing.Optional[builtins.str]) -> None:
        ...

    def py_set_ticker_id(self, ticker_id:typing.Optional[builtins.str]) -> None:
        ...

    def py_set_kind(self, kind:SymKind) -> None:
        ...

    def py_set_min_tick(self, min_tick:builtins.float) -> None:
        ...

    def py_set_min_qty(self, min_qty:builtins.float) -> None:
        ...

    def py_set_prefix(self, prefix:typing.Optional[builtins.str]) -> None:
        ...

    def py_set_currency(self, currency:typing.Optional[builtins.str]) -> None:
        ...

    def py_set_base_currency(self, base_currency:typing.Optional[builtins.str]) -> None:
        ...

    def py_set_ticker(self, ticker:typing.Optional[builtins.str]) -> None:
        ...

    def py_set_country(self, country:typing.Optional[builtins.str]) -> None:
        ...

    def py_set_price_scale(self, price_scale:builtins.float) -> None:
        ...

    def py_set_point_value(self, point_value:builtins.float) -> None:
        ...

    def py_set_metadata(self, metadata:typing.Optional[builtins.str]) -> None:
        ...

    @staticmethod
    def from_dict(dict:typing.Any) -> Sym:
        ...

    def to_dict(self) -> typing.Any:
        ...

    @staticmethod
    def btc_usd() -> Sym:
        ...

    @staticmethod
    def eth_usd() -> Sym:
        ...

    @staticmethod
    def sol_usd() -> Sym:
        ...

    @staticmethod
    def doge_usd() -> Sym:
        ...


class SymKind:
    def __str__(self) -> builtins.str:
        ...

    def __repr__(self) -> builtins.str:
        ...

    @staticmethod
    def from_str(kind:builtins.str) -> SymKind:
        ...

    @staticmethod
    def Stock() -> SymKind:
        ...

    @staticmethod
    def Future() -> SymKind:
        ...

    @staticmethod
    def Option() -> SymKind:
        ...

    @staticmethod
    def Forex() -> SymKind:
        ...

    @staticmethod
    def Crypto() -> SymKind:
        ...

    @staticmethod
    def Unknown() -> SymKind:
        ...

    @staticmethod
    def Other(kind:builtins.str) -> SymKind:
        ...


class Timeframe:
    years: typing.Optional[builtins.int]
    months: typing.Optional[builtins.int]
    weeks: typing.Optional[builtins.int]
    days: typing.Optional[builtins.int]
    hours: typing.Optional[builtins.int]
    minutes: typing.Optional[builtins.int]
    seconds: typing.Optional[builtins.int]
    ticks: typing.Optional[builtins.int]
    ranges: typing.Optional[builtins.int]
    unknown: builtins.bool
    duration: datetime.timedelta
    def __str__(self) -> builtins.str:
        ...

    @staticmethod
    def from_str(timeframe:builtins.str) -> Timeframe:
        ...

    def __repr__(self) -> builtins.str:
        ...

    @staticmethod
    def Years(value:builtins.int) -> Timeframe:
        ...

    @staticmethod
    def Months(value:builtins.int) -> Timeframe:
        ...

    @staticmethod
    def Weeks(value:builtins.int) -> Timeframe:
        ...

    @staticmethod
    def Days(value:builtins.int) -> Timeframe:
        ...

    @staticmethod
    def Hours(value:builtins.int) -> Timeframe:
        ...

    @staticmethod
    def Minutes(value:builtins.int) -> Timeframe:
        ...

    @staticmethod
    def Seconds(value:builtins.int) -> Timeframe:
        ...

    @staticmethod
    def Ticks(value:builtins.int) -> Timeframe:
        ...

    @staticmethod
    def Ranges(value:builtins.int) -> Timeframe:
        ...

    @staticmethod
    def Unknown() -> Timeframe:
        ...

    @staticmethod
    def from_duration(duration:datetime.timedelta) -> Timeframe:
        ...


def accuracy(tp_count:builtins.float, fp_count:builtins.float, fn_count:builtins.float, tn_count:builtins.float) -> builtins.float:
    ...

def avg_losing_trade(gross_loss:builtins.float, losing_trades:builtins.int) -> builtins.float:
    ...

def avg_trade(net_profit:builtins.float, closed_trades:builtins.int) -> builtins.float:
    ...

def avg_win_loss_ratio(avg_winning_trade:builtins.float, avg_losing_trade:builtins.float) -> builtins.float:
    ...

def avg_winning_trade(gross_profit:builtins.float, winning_trades:builtins.int) -> builtins.float:
    ...

def expectancy(pnl:typing.Sequence[builtins.float]) -> builtins.float:
    ...

def expectancy_score(expectancy:builtins.float, opportunity_bars:builtins.float) -> builtins.float:
    ...

def f1(precision:builtins.float, recall:builtins.float) -> builtins.float:
    ...

def get_version() -> builtins.str:
    ...

def gross_loss_pct(gross_loss:builtins.float, initial_capital:builtins.float) -> builtins.float:
    ...

def gross_profit_pct(gross_profit:builtins.float, initial_capital:builtins.float) -> builtins.float:
    ...

def long_net_profit_pct(long_net_profit:builtins.float, initial_capital:builtins.float) -> builtins.float:
    ...

def long_net_profit_ratio(long_net_profit:builtins.float, short_net_profit:builtins.float) -> builtins.float:
    ...

def net_profit_pct(net_profit:builtins.float, initial_capital:builtins.float) -> builtins.float:
    ...

def omega_ratio(positive_returns_sum:builtins.float, negative_returns_sum:builtins.float, risk_free_rate:builtins.float) -> builtins.float:
    ...

def omega_ratio_from_returns(returns:typing.Sequence[builtins.float], risk_free_rate:builtins.float) -> builtins.float:
    ...

def pnl(qty:builtins.float, entry_price:builtins.float, current_price:builtins.float) -> builtins.float:
    ...

def precision(tp_count:builtins.float, fp_count:builtins.float) -> builtins.float:
    ...

def profit_factor(gross_profit:builtins.float, gross_loss:builtins.float) -> builtins.float:
    ...

def recall(tp_count:builtins.float, fn_count:builtins.float) -> builtins.float:
    ...

def sharpe_ratio(mean_returns:builtins.float, std_returns:builtins.float, risk_free_rate:builtins.float) -> builtins.float:
    ...

def sharpe_ratio_from_returns(returns:typing.Sequence[builtins.float], risk_free_rate:builtins.float) -> builtins.float:
    ...

def short_net_profit_pct(short_net_profit:builtins.float, initial_capital:builtins.float) -> builtins.float:
    ...

def sortino_ratio(mean_returns:builtins.float, negative_returns_stdev:builtins.float, risk_free_rate:builtins.float) -> builtins.float:
    ...

def sortino_ratio_from_returns(returns:typing.Sequence[builtins.float], risk_free_rate:builtins.float) -> builtins.float:
    ...

def win_rate(profitable_trades:builtins.int, total_trades:builtins.int) -> builtins.float:
    ...

