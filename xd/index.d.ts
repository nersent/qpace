/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export declare function init(exports: object): void
export declare function f1(precision: number, recall: number): number
export declare function recall(tpCount: number, fnCount: number): number
export declare function precision(tpCount: number, fpCount: number): number
export declare function accuracy(tpCount: number, fpCount: number, fnCount: number, tnCount: number): number
export declare function shortNetProfitPct(shortNetProfit: number, initialCapital: number): number
export declare function longNetProfitPct(longNetProfit: number, initialCapital: number): number
export declare function grossLossPct(grossLoss: number, initialCapital: number): number
export declare function grossProfitPct(grossProfit: number, initialCapital: number): number
export declare function netProfitPct(netProfit: number, initialCapital: number): number
export declare function omegaRatioFromReturns(returns: Float64Array, riskFreeRate: number): number
export declare function omegaRatio(positiveReturnsSum: number, negativeReturnsSum: number, riskFreeRate: number): number
export declare function sortinoRatioFromReturns(returns: Float64Array, riskFreeRate: number): number
export declare function sortinoRatio(meanReturns: number, negativeReturnsStdev: number, riskFreeRate: number): number
export declare function sharpeRatioFromReturns(returns: Float64Array, riskFreeRate: number): number
export declare function sharpeRatio(meanReturns: number, stdReturns: number, riskFreeRate: number): number
export declare function avgWinLossRatio(avgWinningTrade: number, avgLosingTrade: number): number
export declare function avgLosingTrade(grossLoss: number, losingTrades: number): number
export declare function avgWinningTrade(grossProfit: number, winningTrades: number): number
export declare function avgTrade(netProfit: number, closedTrades: number): number
export declare function winRate(profitableTrades: number, totalTrades: number): number
export declare function longNetProfitRatio(longNetProfit: number, shortNetProfit: number): number
export declare function profitFactor(grossProfit: number, grossLoss: number): number
export declare function pnl(qty: number, entryPrice: number, currentPrice: number): number
export declare function expectancyScore(expectancy: number, opportunityBars: number): number
export declare function expectancy(pnl: Float64Array): number
export declare function returns(equity: Float64Array, skipFirst?: boolean | undefined | null): Array<number>
export declare function stdev(values: Float64Array): number
export declare function variance(values: Float64Array): number
export declare function mean(values: Float64Array): number
export declare function sum(values: Float64Array): number
export declare class NodeSym {
  toString(): string
  get id(): string | null
  set id(id?: string | undefined | null)
  get tickerId(): string | null
  set tickerId(tickerId?: string | undefined | null)
  get kind(): NodeSymKind
  set kind(kind: NodeSymKind)
  get minTick(): number
  set minTick(v: number)
  get minQty(): number
  set minQty(v: number)
  get prefix(): string | null
  set prefix(v?: string | undefined | null)
  get currency(): string | null
  set currency(v?: string | undefined | null)
  get baseCurrency(): string | null
  set baseCurrency(v?: string | undefined | null)
  get ticker(): string | null
  set ticker(v?: string | undefined | null)
  get country(): string | null
  set country(v?: string | undefined | null)
  get priceScale(): number
  set priceScale(v: number)
  get pointValue(): number
  set pointValue(v: number)
  get metadata(): string | null
  set metadata(v?: string | undefined | null)
  static btcUsd(): NodeSym
  static ethUsd(): NodeSym
  static solUsd(): NodeSym
  static dogeUsd(): NodeSym
  eq(other: NodeSym): boolean
}
export declare class NodeSymKind {
  toString(): string
  static fromString(text: string): NodeSymKind
  static stock(): NodeSymKind
  static future(): NodeSymKind
  static option(): NodeSymKind
  static forex(): NodeSymKind
  static crypto(): NodeSymKind
  static unknown(): NodeSymKind
  static other(other: string): NodeSymKind
  eq(other: NodeSymKind): boolean
}
export declare class NodeTimeframe {
  toString(): string
  static fromString(timeframe: string): NodeTimeframe
  static years(value: number): NodeTimeframe
  static months(value: number): NodeTimeframe
  static weeks(value: number): NodeTimeframe
  static days(value: number): NodeTimeframe
  static hours(value: number): NodeTimeframe
  static minutes(value: number): NodeTimeframe
  static seconds(value: number): NodeTimeframe
  static ticks(value: number): NodeTimeframe
  static ranges(value: number): NodeTimeframe
  static unknown(): NodeTimeframe
  get years(): number | null
  get months(): number | null
  get weeks(): number | null
  get days(): number | null
  get hours(): number | null
  get minutes(): number | null
  get seconds(): number | null
  get ticks(): number | null
  get ranges(): number | null
  get unknown(): boolean
  eq(other: NodeTimeframe): boolean
  toDurationS(): number
  static fromDurationS(duration: number): NodeTimeframe
}
export declare class OhlcvBar { }
