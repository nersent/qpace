const { readFileSync, writeFileSync, mkdirSync, readdirSync } = require("fs");
const { resolve } = require("path");
const os = require("os");

fileSet("package_json", {
  srcs: ["package.json", "README.md", "LICENSE.md"],
});

fileSet("js", {
  deps: [":package_json", "//lib:js", "//compiler:js", "//cli"],
});

execute("npm_link", (ctx) => ({
  command: `cd ${ctx.sandboxPath} && pnpm link --global`,
  copyDeps: true,
  deps: [":js"],
  run: true,
}));

execute("npm_publish", (ctx) => ({
  // echo "#!/usr/bin/env node\\n" | cat - ./lib/cli.bazed.js
  command: `node -e "const fs = require('fs'); const path = require('path').resolve('./cli/main.bazed.js'); fs.writeFileSync(path, '#!/usr/bin/env node\\n' + fs.readFileSync(path, 'utf8'), 'utf8');" && cd ${ctx.sandboxPath} && rimraf core/pkg/.gitignore && npm publish --access public --force`, //  --dry-run
  copyDeps: true,
  deps: [":js"],
  run: true,
}));

fileSet("py", {
  deps: ["//lib:py"],
});

// include qpace_content/*
const MANIFEST_IN = `
include README.md
include LICENSE.md
include lib/*
include qpace_core/*
`;
// .replaceAll("\n", "\\n");

// python -m twine upload *
const GET_SETUP_PY = (ctx) => {
  const packageJson = JSON.parse(
    readFileSync(resolve(ctx.workspacePath, "package.json"), "utf8"),
  );
  return `
from setuptools import setup, find_packages

local_packages = [
  *find_packages("."),
  "qpace",
]
print(local_packages)

setup(
    name="qpace",
    version="${packageJson.version}",
    package_dir={
        "": "lib",
        "lib": "lib",
        "qpace": "lib",
        "qpace_core": "qpace_core",
        #"qpace_content": "qpace_content",
    },
    packages=[*local_packages],
    package_data={
        "qpace_core": ["qpace_core.pyd", "qpace_core.abi3.so"],
        #"qpace_content": ["qpace_content.pyd", "qpace_content.abi3.so"],
    },
    include_package_data=True,
    python_requires=">=3.10",
    install_requires=[
        "numpy",
        "pandas",
        "matplotlib",
        "scikit-learn",
        "requests",
        "tqdm",
        "plotly",
        "grpcio==1.70.0",
        "protobuf==5.29.1",
    ],
    # platforms=["win_amd64"],
)

`;
  // .replaceAll("\n", "\\n")
  // .replaceAll(`"`, `""`);
};

const PYPROJECT_TOML = `
[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"
`;
// .replaceAll("\n", "\\n")
// .replaceAll(`"`, `""`);

unpackWheel(`maturin_unwheel_core`, (ctx) => ({
  deps: ["//core:maturin"],
  dir: ctx.sandboxPath,
}));

// unpackWheel(`maturin_unwheel_content`, (ctx) => ({
//   deps: ["//lib/content:maturin"],
//   dir: ctx.sandboxPath,
// }));

execute("wheel", (ctx) => {
  const platform = os.platform();
  const arch = os.arch();
  // console.log("XDDDD", ctx.sandboxPath);
  // process.exit();
  mkdirSync(resolve(ctx.sandboxPath), { recursive: true });
  // console.log("XDDDD", resolve(ctx.sandboxPath))
  writeFileSync(
    resolve(ctx.sandboxPath, "../MANIFEST.in"),
    MANIFEST_IN,
    "utf8",
  );
  writeFileSync(
    resolve(ctx.sandboxPath, "../setup.py"),
    GET_SETUP_PY(ctx),
    "utf8",
  );
  writeFileSync(
    resolve(ctx.sandboxPath, "../pyproject.toml"),
    PYPROJECT_TOML,
    "utf8",
  );
  // console.log(
  //   "XDDDDDD",
  //   platform,
  //   arch,
  //   ctx.sandboxPath,
  //   readdirSync(ctx.sandboxPath),
  // );
  return {
    /* command: [
      ...(platform === "win32"
        ? [
            "copy ..\\MANIFEST.in .",
            "copy ..\\setup.py .",
            "copy ..\\pyproject.toml .",
          ]
        : [
            "cp ../MANIFEST.in .",
            "cp ../setup.py .",
            "cp ../pyproject.toml .",
          ]),
      `python setup.py bdist_wheel --plat-name ${(() => {
        if (platform === "darwin") {
          return `macosx_11_0_${arch}`;
        } else if (platform === "linux") {
          return `linux_${arch}`;
        } else {
          return `win_amd64`;
        }
      })()}`,
    ].join(" && "),*/
    // command: [
    //   `echo "Platform: ${platform}"`,
    //   `echo "Architecture: ${arch}"`,
    //   `echo "Sandbox Path: ${ctx.sandboxPath}"`,
    //   `echo "Workspace Path: ${ctx.workspacePath}"`,
    //   `pwd`,
    // ].join(" && "),
    command: `echo "Platform: ${platform}"`,
    cwd: ctx.sandboxPath,
    deps: [
      // ":py",
      "//:package_json",
      // ":maturin_unwheel_core",
      // ":maturin_unwheel_content",
    ],
    run: true,
  };
});

execute("lint", (ctx) => ({
  // pnpm eslint "**/*.ts"
  command: [`cargo check`, `cargo fmt -- --check --verbose`].join("&&"),
  cwd: ctx.workspacePath,
  run: true,
}));
