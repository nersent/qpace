// source: sym.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */ // GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */ // @ts-nocheck
"use strict";
var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
    if (this) {
        return this;
    }
    if (typeof window !== 'undefined') {
        return window;
    }
    if (typeof global !== 'undefined') {
        return global;
    }
    if (typeof self !== 'undefined') {
        return self;
    }
    return Function('return this')();
}).call(null);
goog.exportSymbol('proto.FindQuery', null, global);
goog.exportSymbol('proto.GetListRequest', null, global);
goog.exportSymbol('proto.GetListResponse', null, global);
goog.exportSymbol('proto.GetRequest', null, global);
goog.exportSymbol('proto.GetResponse', null, global);
goog.exportSymbol('proto.Icon', null, global);
goog.exportSymbol('proto.Sym', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.FindQuery = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FindQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */ proto.FindQuery.displayName = 'proto.FindQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.GetRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */ proto.GetRequest.displayName = 'proto.GetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.GetResponse = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */ proto.GetResponse.displayName = 'proto.GetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.GetListRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */ proto.GetListRequest.displayName = 'proto.GetListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.GetListResponse = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.GetListResponse.repeatedFields_, null);
};
goog.inherits(proto.GetListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */ proto.GetListResponse.displayName = 'proto.GetListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.Sym = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.Sym.repeatedFields_, null);
};
goog.inherits(proto.Sym, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */ proto.Sym.displayName = 'proto.Sym';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */ proto.Icon = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Icon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */ proto.Icon.displayName = 'proto.Icon';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.FindQuery.prototype.toObject = function(opt_includeInstance) {
        return proto.FindQuery.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FindQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.FindQuery.toObject = function(includeInstance, msg) {
        var f, obj = {
            id: jspb.Message.getFieldWithDefault(msg, 1, ""),
            tickerId: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FindQuery}
 */ proto.FindQuery.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.FindQuery;
    return proto.FindQuery.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FindQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FindQuery}
 */ proto.FindQuery.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.setId(value);
                break;
            case 2:
                var value = /** @type {string} */ reader.readString();
                msg.setTickerId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.FindQuery.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.FindQuery.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FindQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.FindQuery.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = /** @type {string} */ jspb.Message.getField(message, 1);
    if (f != null) {
        writer.writeString(1, f);
    }
    f = /** @type {string} */ jspb.Message.getField(message, 2);
    if (f != null) {
        writer.writeString(2, f);
    }
};
/**
 * optional string id = 1;
 * @return {string}
 */ proto.FindQuery.prototype.getId = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};
/**
 * @param {string} value
 * @return {!proto.FindQuery} returns this
 */ proto.FindQuery.prototype.setId = function(value) {
    return jspb.Message.setField(this, 1, value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.FindQuery} returns this
 */ proto.FindQuery.prototype.clearId = function() {
    return jspb.Message.setField(this, 1, undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.FindQuery.prototype.hasId = function() {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string ticker_id = 2;
 * @return {string}
 */ proto.FindQuery.prototype.getTickerId = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};
/**
 * @param {string} value
 * @return {!proto.FindQuery} returns this
 */ proto.FindQuery.prototype.setTickerId = function(value) {
    return jspb.Message.setField(this, 2, value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.FindQuery} returns this
 */ proto.FindQuery.prototype.clearTickerId = function() {
    return jspb.Message.setField(this, 2, undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.FindQuery.prototype.hasTickerId = function() {
    return jspb.Message.getField(this, 2) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.GetRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.GetRequest.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.GetRequest.toObject = function(includeInstance, msg) {
        var f, obj = {
            query: (f = msg.getQuery()) && proto.FindQuery.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetRequest}
 */ proto.GetRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.GetRequest;
    return proto.GetRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetRequest}
 */ proto.GetRequest.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = new proto.FindQuery;
                reader.readMessage(value, proto.FindQuery.deserializeBinaryFromReader);
                msg.setQuery(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.GetRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.GetRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.GetRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getQuery();
    if (f != null) {
        writer.writeMessage(1, f, proto.FindQuery.serializeBinaryToWriter);
    }
};
/**
 * optional FindQuery query = 1;
 * @return {?proto.FindQuery}
 */ proto.GetRequest.prototype.getQuery = function() {
    return /** @type{?proto.FindQuery} */ jspb.Message.getWrapperField(this, proto.FindQuery, 1);
};
/**
 * @param {?proto.FindQuery|undefined} value
 * @return {!proto.GetRequest} returns this
*/ proto.GetRequest.prototype.setQuery = function(value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.GetRequest} returns this
 */ proto.GetRequest.prototype.clearQuery = function() {
    return this.setQuery(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.GetRequest.prototype.hasQuery = function() {
    return jspb.Message.getField(this, 1) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.GetResponse.prototype.toObject = function(opt_includeInstance) {
        return proto.GetResponse.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.GetResponse.toObject = function(includeInstance, msg) {
        var f, obj = {
            sym: (f = msg.getSym()) && proto.Sym.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetResponse}
 */ proto.GetResponse.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.GetResponse;
    return proto.GetResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetResponse}
 */ proto.GetResponse.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = new proto.Sym;
                reader.readMessage(value, proto.Sym.deserializeBinaryFromReader);
                msg.setSym(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.GetResponse.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.GetResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.GetResponse.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSym();
    if (f != null) {
        writer.writeMessage(1, f, proto.Sym.serializeBinaryToWriter);
    }
};
/**
 * optional Sym sym = 1;
 * @return {?proto.Sym}
 */ proto.GetResponse.prototype.getSym = function() {
    return /** @type{?proto.Sym} */ jspb.Message.getWrapperField(this, proto.Sym, 1);
};
/**
 * @param {?proto.Sym|undefined} value
 * @return {!proto.GetResponse} returns this
*/ proto.GetResponse.prototype.setSym = function(value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.GetResponse} returns this
 */ proto.GetResponse.prototype.clearSym = function() {
    return this.setSym(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.GetResponse.prototype.hasSym = function() {
    return jspb.Message.getField(this, 1) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.GetListRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.GetListRequest.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.GetListRequest.toObject = function(includeInstance, msg) {
        var f, obj = {
            query: (f = msg.getQuery()) && proto.FindQuery.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetListRequest}
 */ proto.GetListRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.GetListRequest;
    return proto.GetListRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetListRequest}
 */ proto.GetListRequest.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = new proto.FindQuery;
                reader.readMessage(value, proto.FindQuery.deserializeBinaryFromReader);
                msg.setQuery(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.GetListRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.GetListRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.GetListRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getQuery();
    if (f != null) {
        writer.writeMessage(1, f, proto.FindQuery.serializeBinaryToWriter);
    }
};
/**
 * optional FindQuery query = 1;
 * @return {?proto.FindQuery}
 */ proto.GetListRequest.prototype.getQuery = function() {
    return /** @type{?proto.FindQuery} */ jspb.Message.getWrapperField(this, proto.FindQuery, 1);
};
/**
 * @param {?proto.FindQuery|undefined} value
 * @return {!proto.GetListRequest} returns this
*/ proto.GetListRequest.prototype.setQuery = function(value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.GetListRequest} returns this
 */ proto.GetListRequest.prototype.clearQuery = function() {
    return this.setQuery(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.GetListRequest.prototype.hasQuery = function() {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.GetListResponse.repeatedFields_ = [
    1
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.GetListResponse.prototype.toObject = function(opt_includeInstance) {
        return proto.GetListResponse.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.GetListResponse.toObject = function(includeInstance, msg) {
        var f, obj = {
            symsList: jspb.Message.toObjectList(msg.getSymsList(), proto.Sym.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetListResponse}
 */ proto.GetListResponse.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.GetListResponse;
    return proto.GetListResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetListResponse}
 */ proto.GetListResponse.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = new proto.Sym;
                reader.readMessage(value, proto.Sym.deserializeBinaryFromReader);
                msg.addSyms(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.GetListResponse.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.GetListResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.GetListResponse.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSymsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.Sym.serializeBinaryToWriter);
    }
};
/**
 * repeated Sym syms = 1;
 * @return {!Array<!proto.Sym>}
 */ proto.GetListResponse.prototype.getSymsList = function() {
    return /** @type{!Array<!proto.Sym>} */ jspb.Message.getRepeatedWrapperField(this, proto.Sym, 1);
};
/**
 * @param {!Array<!proto.Sym>} value
 * @return {!proto.GetListResponse} returns this
*/ proto.GetListResponse.prototype.setSymsList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.Sym=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Sym}
 */ proto.GetListResponse.prototype.addSyms = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Sym, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GetListResponse} returns this
 */ proto.GetListResponse.prototype.clearSymsList = function() {
    return this.setSymsList([]);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */ proto.Sym.repeatedFields_ = [
    12
];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.Sym.prototype.toObject = function(opt_includeInstance) {
        return proto.Sym.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Sym} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.Sym.toObject = function(includeInstance, msg) {
        var f, obj = {
            id: jspb.Message.getFieldWithDefault(msg, 1, ""),
            prefix: jspb.Message.getFieldWithDefault(msg, 2, ""),
            currency: jspb.Message.getFieldWithDefault(msg, 3, ""),
            baseCurrency: jspb.Message.getFieldWithDefault(msg, 4, ""),
            ticker: jspb.Message.getFieldWithDefault(msg, 5, ""),
            tickerId: jspb.Message.getFieldWithDefault(msg, 6, ""),
            country: jspb.Message.getFieldWithDefault(msg, 7, ""),
            minTick: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
            minQty: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
            priceScale: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
            pointValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
            iconsList: jspb.Message.toObjectList(msg.getIconsList(), proto.Icon.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sym}
 */ proto.Sym.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.Sym;
    return proto.Sym.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sym} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sym}
 */ proto.Sym.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.setId(value);
                break;
            case 2:
                var value = /** @type {string} */ reader.readString();
                msg.setPrefix(value);
                break;
            case 3:
                var value = /** @type {string} */ reader.readString();
                msg.setCurrency(value);
                break;
            case 4:
                var value = /** @type {string} */ reader.readString();
                msg.setBaseCurrency(value);
                break;
            case 5:
                var value = /** @type {string} */ reader.readString();
                msg.setTicker(value);
                break;
            case 6:
                var value = /** @type {string} */ reader.readString();
                msg.setTickerId(value);
                break;
            case 7:
                var value = /** @type {string} */ reader.readString();
                msg.setCountry(value);
                break;
            case 8:
                var value = /** @type {number} */ reader.readDouble();
                msg.setMinTick(value);
                break;
            case 9:
                var value = /** @type {number} */ reader.readDouble();
                msg.setMinQty(value);
                break;
            case 10:
                var value = /** @type {number} */ reader.readDouble();
                msg.setPriceScale(value);
                break;
            case 11:
                var value = /** @type {number} */ reader.readDouble();
                msg.setPointValue(value);
                break;
            case 12:
                var value = new proto.Icon;
                reader.readMessage(value, proto.Icon.deserializeBinaryFromReader);
                msg.addIcons(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.Sym.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.Sym.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Sym} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.Sym.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = /** @type {string} */ jspb.Message.getField(message, 2);
    if (f != null) {
        writer.writeString(2, f);
    }
    f = /** @type {string} */ jspb.Message.getField(message, 3);
    if (f != null) {
        writer.writeString(3, f);
    }
    f = /** @type {string} */ jspb.Message.getField(message, 4);
    if (f != null) {
        writer.writeString(4, f);
    }
    f = /** @type {string} */ jspb.Message.getField(message, 5);
    if (f != null) {
        writer.writeString(5, f);
    }
    f = /** @type {string} */ jspb.Message.getField(message, 6);
    if (f != null) {
        writer.writeString(6, f);
    }
    f = /** @type {string} */ jspb.Message.getField(message, 7);
    if (f != null) {
        writer.writeString(7, f);
    }
    f = /** @type {number} */ jspb.Message.getField(message, 8);
    if (f != null) {
        writer.writeDouble(8, f);
    }
    f = /** @type {number} */ jspb.Message.getField(message, 9);
    if (f != null) {
        writer.writeDouble(9, f);
    }
    f = /** @type {number} */ jspb.Message.getField(message, 10);
    if (f != null) {
        writer.writeDouble(10, f);
    }
    f = /** @type {number} */ jspb.Message.getField(message, 11);
    if (f != null) {
        writer.writeDouble(11, f);
    }
    f = message.getIconsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(12, f, proto.Icon.serializeBinaryToWriter);
    }
};
/**
 * optional string id = 1;
 * @return {string}
 */ proto.Sym.prototype.getId = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};
/**
 * @param {string} value
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.setId = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string prefix = 2;
 * @return {string}
 */ proto.Sym.prototype.getPrefix = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};
/**
 * @param {string} value
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.setPrefix = function(value) {
    return jspb.Message.setField(this, 2, value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.clearPrefix = function() {
    return jspb.Message.setField(this, 2, undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.Sym.prototype.hasPrefix = function() {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional string currency = 3;
 * @return {string}
 */ proto.Sym.prototype.getCurrency = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 3, "");
};
/**
 * @param {string} value
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.setCurrency = function(value) {
    return jspb.Message.setField(this, 3, value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.clearCurrency = function() {
    return jspb.Message.setField(this, 3, undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.Sym.prototype.hasCurrency = function() {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional string base_currency = 4;
 * @return {string}
 */ proto.Sym.prototype.getBaseCurrency = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 4, "");
};
/**
 * @param {string} value
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.setBaseCurrency = function(value) {
    return jspb.Message.setField(this, 4, value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.clearBaseCurrency = function() {
    return jspb.Message.setField(this, 4, undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.Sym.prototype.hasBaseCurrency = function() {
    return jspb.Message.getField(this, 4) != null;
};
/**
 * optional string ticker = 5;
 * @return {string}
 */ proto.Sym.prototype.getTicker = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 5, "");
};
/**
 * @param {string} value
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.setTicker = function(value) {
    return jspb.Message.setField(this, 5, value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.clearTicker = function() {
    return jspb.Message.setField(this, 5, undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.Sym.prototype.hasTicker = function() {
    return jspb.Message.getField(this, 5) != null;
};
/**
 * optional string ticker_id = 6;
 * @return {string}
 */ proto.Sym.prototype.getTickerId = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 6, "");
};
/**
 * @param {string} value
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.setTickerId = function(value) {
    return jspb.Message.setField(this, 6, value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.clearTickerId = function() {
    return jspb.Message.setField(this, 6, undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.Sym.prototype.hasTickerId = function() {
    return jspb.Message.getField(this, 6) != null;
};
/**
 * optional string country = 7;
 * @return {string}
 */ proto.Sym.prototype.getCountry = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 7, "");
};
/**
 * @param {string} value
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.setCountry = function(value) {
    return jspb.Message.setField(this, 7, value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.clearCountry = function() {
    return jspb.Message.setField(this, 7, undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.Sym.prototype.hasCountry = function() {
    return jspb.Message.getField(this, 7) != null;
};
/**
 * optional double min_tick = 8;
 * @return {number}
 */ proto.Sym.prototype.getMinTick = function() {
    return /** @type {number} */ jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0);
};
/**
 * @param {number} value
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.setMinTick = function(value) {
    return jspb.Message.setField(this, 8, value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.clearMinTick = function() {
    return jspb.Message.setField(this, 8, undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.Sym.prototype.hasMinTick = function() {
    return jspb.Message.getField(this, 8) != null;
};
/**
 * optional double min_qty = 9;
 * @return {number}
 */ proto.Sym.prototype.getMinQty = function() {
    return /** @type {number} */ jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0);
};
/**
 * @param {number} value
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.setMinQty = function(value) {
    return jspb.Message.setField(this, 9, value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.clearMinQty = function() {
    return jspb.Message.setField(this, 9, undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.Sym.prototype.hasMinQty = function() {
    return jspb.Message.getField(this, 9) != null;
};
/**
 * optional double price_scale = 10;
 * @return {number}
 */ proto.Sym.prototype.getPriceScale = function() {
    return /** @type {number} */ jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0);
};
/**
 * @param {number} value
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.setPriceScale = function(value) {
    return jspb.Message.setField(this, 10, value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.clearPriceScale = function() {
    return jspb.Message.setField(this, 10, undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.Sym.prototype.hasPriceScale = function() {
    return jspb.Message.getField(this, 10) != null;
};
/**
 * optional double point_value = 11;
 * @return {number}
 */ proto.Sym.prototype.getPointValue = function() {
    return /** @type {number} */ jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0);
};
/**
 * @param {number} value
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.setPointValue = function(value) {
    return jspb.Message.setField(this, 11, value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.clearPointValue = function() {
    return jspb.Message.setField(this, 11, undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */ proto.Sym.prototype.hasPointValue = function() {
    return jspb.Message.getField(this, 11) != null;
};
/**
 * repeated Icon icons = 12;
 * @return {!Array<!proto.Icon>}
 */ proto.Sym.prototype.getIconsList = function() {
    return /** @type{!Array<!proto.Icon>} */ jspb.Message.getRepeatedWrapperField(this, proto.Icon, 12);
};
/**
 * @param {!Array<!proto.Icon>} value
 * @return {!proto.Sym} returns this
*/ proto.Sym.prototype.setIconsList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 12, value);
};
/**
 * @param {!proto.Icon=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Icon}
 */ proto.Sym.prototype.addIcons = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.Icon, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Sym} returns this
 */ proto.Sym.prototype.clearIconsList = function() {
    return this.setIconsList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */ proto.Icon.prototype.toObject = function(opt_includeInstance) {
        return proto.Icon.toObject(opt_includeInstance, this);
    };
    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Icon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.Icon.toObject = function(includeInstance, msg) {
        var f, obj = {
            url: jspb.Message.getFieldWithDefault(msg, 1, ""),
            mimeType: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Icon}
 */ proto.Icon.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.Icon;
    return proto.Icon.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Icon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Icon}
 */ proto.Icon.deserializeBinaryFromReader = function(msg, reader) {
    while(reader.nextField()){
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch(field){
            case 1:
                var value = /** @type {string} */ reader.readString();
                msg.setUrl(value);
                break;
            case 2:
                var value = /** @type {string} */ reader.readString();
                msg.setMimeType(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */ proto.Icon.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.Icon.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Icon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */ proto.Icon.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getUrl();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getMimeType();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string url = 1;
 * @return {string}
 */ proto.Icon.prototype.getUrl = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};
/**
 * @param {string} value
 * @return {!proto.Icon} returns this
 */ proto.Icon.prototype.setUrl = function(value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string mime_type = 2;
 * @return {string}
 */ proto.Icon.prototype.getMimeType = function() {
    return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};
/**
 * @param {string} value
 * @return {!proto.Icon} returns this
 */ proto.Icon.prototype.setMimeType = function(value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
goog.object.extend(exports, proto);
