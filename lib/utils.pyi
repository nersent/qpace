# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import datetime
import typing
import qpace_rs

def accuracy(tp_count:builtins.float, fp_count:builtins.float, fn_count:builtins.float, tn_count:builtins.float) -> builtins.float:
    r"""
    https://pmc.ncbi.nlm.nih.gov/articles/PMC4614595/
    """
    ...

def avg_losing_trade(gross_loss:builtins.float, losing_trades:builtins.int) -> builtins.float:
    ...

def avg_trade(net_profit:builtins.float, closed_trades:builtins.int) -> builtins.float:
    ...

def avg_win_loss_ratio(avg_winning_trade:builtins.float, avg_losing_trade:builtins.float) -> builtins.float:
    ...

def avg_winning_trade(gross_profit:builtins.float, winning_trades:builtins.int) -> builtins.float:
    ...

def expectancy(pnl_series:typing.Sequence[builtins.float]) -> builtins.float:
    ...

def expectancy_score(expectancy:builtins.float, opportunity_bars:builtins.float) -> builtins.float:
    ...

def gross_loss_pct(gross_loss:builtins.float, initial_capital:builtins.float) -> builtins.float:
    ...

def gross_profit_pct(gross_profit:builtins.float, initial_capital:builtins.float) -> builtins.float:
    ...

def hl2(high:builtins.float, low:builtins.float) -> builtins.float:
    ...

def hlc3(high:builtins.float, low:builtins.float, close:builtins.float) -> builtins.float:
    ...

def hlcc4(high:builtins.float, low:builtins.float, close:builtins.float) -> builtins.float:
    ...

def kelly_criterion(win_prob:builtins.float, profit_factor:builtins.float) -> builtins.float:
    r"""
    https://python.plainenglish.io/the-kelly-criterion-maximizing-returns-through-optimal-betting-32781a768ffb
    """
    ...

def long_net_profit_pct(long_net_profit:builtins.float, initial_capital:builtins.float) -> builtins.float:
    ...

def long_net_profit_ratio(long_net_profit:builtins.float, short_net_profit:builtins.float) -> builtins.float:
    ...

def max_drawdown_pct(max_dd:builtins.float, net_equity_max:builtins.float) -> builtins.float:
    ...

def max_run_up_pct(max_run_up:builtins.float, bar_equity_max:builtins.float) -> builtins.float:
    ...

def net_profit_pct(net_profit:builtins.float, initial_capital:builtins.float) -> builtins.float:
    ...

def omega_ratio(positive_returns_sum:builtins.float, negative_returns_sum:builtins.float, risk_free_rate:builtins.float) -> builtins.float:
    ...

def order_size(equity_pct:builtins.float, equity:builtins.float, exchange_rate:builtins.float, instrument_price:builtins.float, point_value:builtins.float) -> builtins.float:
    r"""
    
    the calculated order size, rounded down to the smallest trade quantity. For stocks, futures, CFDs, and forex that minimum quantity is 1. For Bitcoin (BTCUSD) it's 0.000001 and Ethereum (ETHUSD) uses 0.0001.
    
    # Parameters
    
    * `equity_pct` - A `f64` representing the percentage of the current strategy equity to invest in each order. This percentage is derived from either the `default_qty_value` setting or the manual 'Order size' option within the strategy's settings window.
    
    * `equity` - A `f64` representing the strategy's current equity. This is the sum of the initial capital, closed net profit, and open position profit. Note that this includes unrealized profits/losses, which may affect the calculated order size if the open position's result changes significantly when it's closed.
    
    * `exchange_rate` - A `f64` used for currency conversion, if necessary. If the strategy currency and the instrument currency are the same, this should be 1. Otherwise, provide the conversion rate between the two currencies.
    
    * `instrument_price` - A `f64` representing the last available price at the time the order is generated. This is typically the close price of the bar on which the order is generated, unless using options like 'Recalculate After Order Filled' or 'Recalculate On Every Tick', which may use a different price within the bar.
    
    * `point_value` - A `f64` that denotes the currency amount of one full point of price movement for the instrument. For example, it is 1 for stocks and 20 for the E-mini Nasdaq 100 futures.
    
    # Returns
    
    Returns a `f64` representing the calculated order size, rounded down to the smallest trade quantity based on the instrument type.
    """
    ...

def order_size_for_equity_pct(equity_pct:builtins.float, equity:builtins.float, current_position:builtins.float, instrument_price:builtins.float, point_value:builtins.float, exchange_rate:builtins.float) -> builtins.float:
    ...

def pct_change(current:builtins.float, previous:builtins.float) -> builtins.float:
    ...

def pnl(qty:builtins.float, entry_price:builtins.float, current_price:builtins.float) -> builtins.float:
    ...

def profit_factor(gross_profit:builtins.float, gross_loss:builtins.float) -> builtins.float:
    ...

def returns(equity:typing.Sequence[builtins.float], pad:builtins.bool=False) -> builtins.list[builtins.float]:
    r"""
    
    Calculates returns from equity (% change)
    Returns without first item, because it would be NAN.
    Example: [1.0, 2.0] -> [2.0] // 200%
    """
    ...

def round_contracts(size:builtins.float, min_qty:builtins.float) -> builtins.float:
    r"""
    Rounds `size` to the nearest multiple of the minimum order quantity.
    """
    ...

def round_to_min_tick(value:builtins.float, min_tick:builtins.float) -> builtins.float:
    ...

def sensitivity(tp_count:builtins.float, fp_count:builtins.float) -> builtins.float:
    r"""
    https://pmc.ncbi.nlm.nih.gov/articles/PMC4614595/
    """
    ...

def sharpe_ratio(mean_returns:builtins.float, std_returns:builtins.float, risk_free_rate:builtins.float) -> builtins.float:
    ...

def short_net_profit_pct(short_net_profit:builtins.float, initial_capital:builtins.float) -> builtins.float:
    ...

def sortino_ratio(mean_returns:builtins.float, negative_returns_stdev:builtins.float, risk_free_rate:builtins.float) -> builtins.float:
    ...

def specificity(fp_count:builtins.float, tn_count:builtins.float) -> builtins.float:
    r"""
    https://pmc.ncbi.nlm.nih.gov/articles/PMC4614595/
    """
    ...

def validate_contracts(size:builtins.float, min_qty:builtins.float) -> builtins.bool:
    r"""
    Checks if `size` is a valid order quantity by comparing it to the minimum order quantity.
    """
    ...

def win_rate(profitable_trades:builtins.int, total_trades:builtins.int) -> builtins.float:
    ...

def zip_ohlcv_bars(open_time:typing.Optional[typing.Sequence[typing.Optional[datetime.datetime]]]=None, close_time:typing.Optional[typing.Sequence[typing.Optional[datetime.datetime]]]=None, open:typing.Optional[typing.Sequence[builtins.float]]=None, high:typing.Optional[typing.Sequence[builtins.float]]=None, low:typing.Optional[typing.Sequence[builtins.float]]=None, close:typing.Optional[typing.Sequence[builtins.float]]=None, volume:typing.Optional[typing.Sequence[builtins.float]]=None) -> builtins.list[OhlcvBar]:
    ...

