
/*
This file was generated by qPACE compiler. DO NOT EDIT!

https://qpace.dev

https://github.com/nersent/qpace

Date: 2025-03-09T12:06:05.343Z
*/

use std::cell::RefCell;
use std::collections::HashMap;
use std::collections::HashSet;
use std::marker::PhantomData;
use std::rc::Rc;

use qpace_core::{
  backtest::{Backtest, BacktestConfig},
  signal::{Signal},
  ctx::Ctx,
  ohlcv::{},
  orderbook::OrderConfig,
};

mod runtime;

use runtime::{OhlcvSeries, PineCtx, PineBool, PineInt, PineFloat, PineNa, PineString, PineColor, PineSeries, PineAny, PineObject, PinePlot, PineHline};
      
    

#[doc = "qpc_main_1832(): void"]
fn _8_qpc_main_1832_6beed8(ctx: &PineCtx) -> () {
{();}}
          

struct _State_10_accdist_11c3e8 {_call_8277_418_accdist_91cf10: _State_418_accdist_91cf10,}
impl runtime::Default for _State_10_accdist_11c3e8 { fn default() -> _State_10_accdist_11c3e8 {return _State_10_accdist_11c3e8 {_call_8277_418_accdist_91cf10: runtime::Default::default(),};} }

impl _State_10_accdist_11c3e8 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "accdist(): float"]
fn _10_accdist_11c3e8(ctx: &PineCtx, state: &mut _State_10_accdist_11c3e8, _3_close_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>, _1_high_0da3b0: &PineSeries::<PineFloat>, _4_volume_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {state.next();

{
{_418_accdist_91cf10(&ctx, &mut state._call_8277_418_accdist_91cf10, &_3_close_0da3b0, &_2_low_0da3b0, &_1_high_0da3b0, &_4_volume_0da3b0)}}}
          

struct _State_418_accdist_91cf10 {_419_mfm_0da3b0: PineSeries::<PineFloat>,
_419_mfm_0da3b0_initialized: bool,
_420_mfv_0da3b0: PineSeries::<PineFloat>,
_420_mfv_0da3b0_initialized: bool,
_421_prev_ad_433c11: PineFloat,
_421_prev_ad_433c11_initialized: bool,}
impl runtime::Default for _State_418_accdist_91cf10 { fn default() -> _State_418_accdist_91cf10 {return _State_418_accdist_91cf10 {_419_mfm_0da3b0: runtime::Default::default(),
_419_mfm_0da3b0_initialized: runtime::Default::default(),
_420_mfv_0da3b0: runtime::Default::default(),
_420_mfv_0da3b0_initialized: runtime::Default::default(),
_421_prev_ad_433c11: runtime::Default::default(),
_421_prev_ad_433c11_initialized: runtime::Default::default(),};} }

impl _State_418_accdist_91cf10 {
  #[inline]
  fn next(&mut self) {
    self._419_mfm_0da3b0.next();
self._420_mfv_0da3b0.next();

  }
}
    

#[doc = "accdist(): float"]
fn _418_accdist_91cf10(ctx: &PineCtx, state: &mut _State_418_accdist_91cf10, _3_close_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>, _1_high_0da3b0: &PineSeries::<PineFloat>, _4_volume_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {state.next();
let _419_mfm_0da3b0 = &mut state._419_mfm_0da3b0;
let _420_mfv_0da3b0 = &mut state._420_mfv_0da3b0;
let _421_prev_ad_433c11 = &mut state._421_prev_ad_433c11;
{
{_419_mfm_0da3b0.set(<PineFloat>::from(((_3_close_0da3b0.get() - _2_low_0da3b0.get()) - (_1_high_0da3b0.get() - _3_close_0da3b0.get())) / (_1_high_0da3b0.get() - _2_low_0da3b0.get())));
_420_mfv_0da3b0.set(<PineFloat>::from(_419_mfm_0da3b0.get() * _4_volume_0da3b0.get()));

if !state._421_prev_ad_433c11_initialized {
  *_421_prev_ad_433c11 = <PineFloat>::from(<PineFloat>::from(PineNa));
  state._421_prev_ad_433c11_initialized = true;
}
    
let mut _422_ad_433c11: PineFloat;
_422_ad_433c11 = <PineFloat>::from(_209_global_nz_46c417(&ctx, _420_mfv_0da3b0.get()) + _209_global_nz_46c417(&ctx, *_421_prev_ad_433c11));
*_421_prev_ad_433c11 = <PineFloat>::from(_422_ad_433c11);;
_422_ad_433c11}}}
          

#[doc = "global_nz(x: float): float"]
fn _209_global_nz_46c417(ctx: &PineCtx, _210_x_433c11: PineFloat) -> PineFloat {
{{let _if_then_1942 = {<PineFloat>::from(0.0_f64)};
let _if_else_1942 = {_210_x_433c11};
if <bool>::from(_206_global_na_39d023(&ctx, _210_x_433c11)) {_if_then_1942} else {_if_else_1942}}}}
          

#[doc = "global_na<float>(x: float): bool"]
fn _206_global_na_39d023(ctx: &PineCtx, _208_x_b01ec9: PineFloat) -> PineBool {return (runtime::Na::na(_208_x_b01ec9)).into();}
          

struct _State_11_cum_cda70d {_call_79_551_cum_8b1ad6: _State_551_cum_8b1ad6,}
impl runtime::Default for _State_11_cum_cda70d { fn default() -> _State_11_cum_cda70d {return _State_11_cum_cda70d {_call_79_551_cum_8b1ad6: runtime::Default::default(),};} }

impl _State_11_cum_cda70d {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "cum(src: series<float>): float"]
fn _11_cum_cda70d(ctx: &PineCtx, state: &mut _State_11_cum_cda70d, _12_src_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {state.next();

{
{_551_cum_8b1ad6(&ctx, &mut state._call_79_551_cum_8b1ad6, _12_src_0da3b0.get())}}}
          

struct _State_551_cum_8b1ad6 {_553_x_433c11: PineFloat,
_553_x_433c11_initialized: bool,}
impl runtime::Default for _State_551_cum_8b1ad6 { fn default() -> _State_551_cum_8b1ad6 {return _State_551_cum_8b1ad6 {_553_x_433c11: runtime::Default::default(),
_553_x_433c11_initialized: runtime::Default::default(),};} }

impl _State_551_cum_8b1ad6 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "cum(src: float): float"]
fn _551_cum_8b1ad6(ctx: &PineCtx, state: &mut _State_551_cum_8b1ad6, _552_src_433c11: PineFloat) -> PineFloat {state.next();
let _553_x_433c11 = &mut state._553_x_433c11;
{
{
if !state._553_x_433c11_initialized {
  *_553_x_433c11 = <PineFloat>::from(<PineFloat>::from(0.0_f64));
  state._553_x_433c11_initialized = true;
}
    
*_553_x_433c11 = <PineFloat>::from(_209_global_nz_46c417(&ctx, *_553_x_433c11) + _552_src_433c11);;
*_553_x_433c11}}}
          

#[doc = "change(src: series<float>): series<float>"]
fn _13_change_86999c(ctx: &PineCtx, _14_src_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {
{_554_change_661c05(&ctx, &_14_src_0da3b0)}}
          

#[doc = "change(src: series<float>): series<float>"]
fn _554_change_661c05(ctx: &PineCtx, _555_src_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {
{_555_src_0da3b0.get() - _555_src_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1)))}}
          

struct _State_15_barssince_4843f8 {_call_117_556_barssince_e3a0dd: _State_556_barssince_e3a0dd,}
impl runtime::Default for _State_15_barssince_4843f8 { fn default() -> _State_15_barssince_4843f8 {return _State_15_barssince_4843f8 {_call_117_556_barssince_e3a0dd: runtime::Default::default(),};} }

impl _State_15_barssince_4843f8 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "barssince(condition: series<bool>): int"]
fn _15_barssince_4843f8(ctx: &PineCtx, state: &mut _State_15_barssince_4843f8, _16_condition_e4c4fc: &PineSeries::<PineBool>) -> PineInt {state.next();

{
{_556_barssince_e3a0dd(&ctx, &mut state._call_117_556_barssince_e3a0dd, _16_condition_e4c4fc.get())}}}
          

struct _State_556_barssince_e3a0dd {_558_bars_7e8107: PineInt,
_558_bars_7e8107_initialized: bool,}
impl runtime::Default for _State_556_barssince_e3a0dd { fn default() -> _State_556_barssince_e3a0dd {return _State_556_barssince_e3a0dd {_558_bars_7e8107: runtime::Default::default(),
_558_bars_7e8107_initialized: runtime::Default::default(),};} }

impl _State_556_barssince_e3a0dd {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "barssince(condition: bool): int"]
fn _556_barssince_e3a0dd(ctx: &PineCtx, state: &mut _State_556_barssince_e3a0dd, _557_condition_8e45b4: PineBool) -> PineInt {state.next();
let _558_bars_7e8107 = &mut state._558_bars_7e8107;
{
{
if !state._558_bars_7e8107_initialized {
  *_558_bars_7e8107 = <PineInt>::from(<PineInt>::from(0));
  state._558_bars_7e8107_initialized = true;
}
    
*_558_bars_7e8107 = <PineInt>::from({let _if_then_5377 = {<PineInt>::from(0)};
let _if_else_5377 = {*_558_bars_7e8107 + <PineInt>::from(1)};
if <bool>::from(_557_condition_8e45b4) {_if_then_5377} else {_if_else_5377}});;
*_558_bars_7e8107}}}
          

#[doc = "roc(src: series<float>, length: int): series<float>"]
fn _17_roc_cada68(ctx: &PineCtx, _18_src_0da3b0: &PineSeries::<PineFloat>, mut _19_length_7e8107: PineInt) -> PineFloat {if runtime::Na::na(_19_length_7e8107) {_19_length_7e8107 = <PineInt>::from(14)}
{_559_roc_27f889(&ctx, &_18_src_0da3b0, _19_length_7e8107)}}
          

#[doc = "roc(src: series<float>, length: int): series<float>"]
fn _559_roc_27f889(ctx: &PineCtx, _560_src_0da3b0: &PineSeries::<PineFloat>, _561_length_7e8107: PineInt) -> PineFloat {
{<PineFloat>::from(100.0_f64) * (_560_src_0da3b0.get() - _560_src_0da3b0.get_at_offset(<usize>::from(_561_length_7e8107))) / _560_src_0da3b0.get_at_offset(<usize>::from(_561_length_7e8107))}}
          

#[doc = "crossover(source1: series<float>, source2: series<float>): bool"]
fn _20_crossover_765544(ctx: &PineCtx, _21_source1_0da3b0: &PineSeries::<PineFloat>, _22_source2_0da3b0: &PineSeries::<PineFloat>) -> PineBool {
{_562_crossover_a7b692(&ctx, &_21_source1_0da3b0, &_22_source2_0da3b0)}}
          

#[doc = "crossover(source1: series<float>, source2: series<float>): bool"]
fn _562_crossover_a7b692(ctx: &PineCtx, _563_source1_0da3b0: &PineSeries::<PineFloat>, _564_source2_0da3b0: &PineSeries::<PineFloat>) -> PineBool {
{if <bool>::from(<PineBool>::from(<PineBool>::from(<bool>::from(_206_global_na_8182b8(&ctx, &_563_source1_0da3b0)) | <bool>::from(_206_global_na_8182b8(&ctx, &_564_source2_0da3b0))))) {<PineBool>::from({PineNa})} else {{<PineBool>::from(<PineBool>::from(<bool>::from(<PineBool>::from(_563_source1_0da3b0.get() > _564_source2_0da3b0.get())) & <bool>::from(<PineBool>::from(_563_source1_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1))) <= _564_source2_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1)))))))}}}}
          

#[doc = "global_na<series<float>>(x: series<float>): bool"]
fn _206_global_na_8182b8(ctx: &PineCtx, _208_x_b01ec9: &PineSeries::<PineFloat>) -> PineBool {return (runtime::Na::na(_208_x_b01ec9.get())).into();}
          

#[doc = "crossunder(source1: series<float>, source2: series<float>): bool"]
fn _23_crossunder_11b1fc(ctx: &PineCtx, _24_source1_0da3b0: &PineSeries::<PineFloat>, _25_source2_0da3b0: &PineSeries::<PineFloat>) -> PineBool {
{_565_crossunder_6e3d31(&ctx, &_24_source1_0da3b0, &_25_source2_0da3b0)}}
          

#[doc = "crossunder(source1: series<float>, source2: series<float>): bool"]
fn _565_crossunder_6e3d31(ctx: &PineCtx, _566_source1_0da3b0: &PineSeries::<PineFloat>, _567_source2_0da3b0: &PineSeries::<PineFloat>) -> PineBool {
{if <bool>::from(<PineBool>::from(<PineBool>::from(<bool>::from(_206_global_na_8182b8(&ctx, &_566_source1_0da3b0)) | <bool>::from(_206_global_na_8182b8(&ctx, &_567_source2_0da3b0))))) {<PineBool>::from({PineNa})} else {{<PineBool>::from(<PineBool>::from(<bool>::from(<PineBool>::from(_566_source1_0da3b0.get() < _567_source2_0da3b0.get())) & <bool>::from(<PineBool>::from(_566_source1_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1))) >= _567_source2_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1)))))))}}}}
          

#[doc = "cross(source1: series<float>, source2: series<float>): bool"]
fn _26_cross_3544aa(ctx: &PineCtx, _27_source1_0da3b0: &PineSeries::<PineFloat>, _28_source2_0da3b0: &PineSeries::<PineFloat>) -> PineBool {
{_568_cross_3a0e03(&ctx, &_27_source1_0da3b0, &_28_source2_0da3b0)}}
          

#[doc = "cross(source1: series<float>, source2: series<float>): bool"]
fn _568_cross_3a0e03(ctx: &PineCtx, _569_source1_0da3b0: &PineSeries::<PineFloat>, _570_source2_0da3b0: &PineSeries::<PineFloat>) -> PineBool {
{if <bool>::from(<PineBool>::from(<PineBool>::from(<bool>::from(_206_global_na_8182b8(&ctx, &_569_source1_0da3b0)) | <bool>::from(_206_global_na_8182b8(&ctx, &_570_source2_0da3b0))))) {<PineBool>::from({PineNa})} else {{<PineBool>::from(<PineBool>::from(<bool>::from((<PineBool>::from(<PineBool>::from(<bool>::from(<PineBool>::from(_569_source1_0da3b0.get() > _570_source2_0da3b0.get())) & <bool>::from(<PineBool>::from(_569_source1_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1))) < _570_source2_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1))))))))) | <bool>::from((<PineBool>::from(<PineBool>::from(<bool>::from(<PineBool>::from(_569_source1_0da3b0.get() < _570_source2_0da3b0.get())) & <bool>::from(<PineBool>::from(_569_source1_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1))) > _570_source2_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1)))))))))))}}}}
          

struct _State_29_highestbars_dda950 {_call_252_571_highestbars_3b748a: _State_571_highestbars_3b748a,}
impl runtime::Default for _State_29_highestbars_dda950 { fn default() -> _State_29_highestbars_dda950 {return _State_29_highestbars_dda950 {_call_252_571_highestbars_3b748a: runtime::Default::default(),};} }

impl _State_29_highestbars_dda950 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "highestbars(src: series<float>, length: int): int"]
fn _29_highestbars_dda950(ctx: &PineCtx, state: &mut _State_29_highestbars_dda950, _30_src_0da3b0: &PineSeries::<PineFloat>, mut _31_length_7e8107: PineInt) -> PineInt {state.next();

{if runtime::Na::na(_31_length_7e8107) {_31_length_7e8107 = <PineInt>::from(14)}
{_571_highestbars_3b748a(&ctx, &mut state._call_252_571_highestbars_3b748a, &_30_src_0da3b0, _31_length_7e8107)}}}
          

struct _State_571_highestbars_3b748a {_call_5642_238_math_counter_77b090: _State_238_math_counter_77b090,}
impl runtime::Default for _State_571_highestbars_3b748a { fn default() -> _State_571_highestbars_3b748a {return _State_571_highestbars_3b748a {_call_5642_238_math_counter_77b090: runtime::Default::default(),};} }

impl _State_571_highestbars_3b748a {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "highestbars(src: series<float>, length: int): int"]
fn _571_highestbars_3b748a(ctx: &PineCtx, state: &mut _State_571_highestbars_3b748a, _572_src_0da3b0: &PineSeries::<PineFloat>, _573_length_7e8107: PineInt) -> PineInt {state.next();

{
{let mut _574_counter_7e8107: PineInt;
_574_counter_7e8107 = <PineInt>::from(_238_math_counter_77b090(&ctx, &mut state._call_5642_238_math_counter_77b090));
if <bool>::from(<PineBool>::from(_574_counter_7e8107 < _573_length_7e8107)) {<PineInt>::from({PineNa})} else {{let mut _575_index_7e8107: PineInt;
_575_index_7e8107 = <PineInt>::from(<PineInt>::from(0));
let mut _576_value_433c11: PineFloat;
_576_value_433c11 = <PineFloat>::from(_572_src_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(0))));
{let mut _577_i_7e8107: PineInt;
_577_i_7e8107 = <PineInt>::from(<PineInt>::from(1));
while <bool>::from(<PineBool>::from(_577_i_7e8107 <= _573_length_7e8107 - <PineInt>::from(1))) {{let mut _578_x_433c11: PineFloat;
_578_x_433c11 = <PineFloat>::from(_572_src_0da3b0.get_at_offset(<usize>::from(_577_i_7e8107)));
if <bool>::from(<PineBool>::from(_578_x_433c11 >= _576_value_433c11)) {<()>::from({_576_value_433c11 = <PineFloat>::from(_578_x_433c11);;
_575_index_7e8107 = <PineInt>::from(_577_i_7e8107);
_575_index_7e8107})}}
{_577_i_7e8107 = <PineInt>::from(_577_i_7e8107 + 1.into());
_577_i_7e8107};}}
-_575_index_7e8107}}}}}
          

struct _State_238_math_counter_77b090 {_call_2239_235_math_counter_31f080: _State_235_math_counter_31f080,}
impl runtime::Default for _State_238_math_counter_77b090 { fn default() -> _State_238_math_counter_77b090 {return _State_238_math_counter_77b090 {_call_2239_235_math_counter_31f080: runtime::Default::default(),};} }

impl _State_238_math_counter_77b090 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "math_counter(): int"]
fn _238_math_counter_77b090(ctx: &PineCtx, state: &mut _State_238_math_counter_77b090) -> PineInt {state.next();

{
{_235_math_counter_31f080(&ctx, &mut state._call_2239_235_math_counter_31f080, <PineBool>::from(true))}}}
          

struct _State_235_math_counter_31f080 {_237_x_7e8107: PineInt,
_237_x_7e8107_initialized: bool,}
impl runtime::Default for _State_235_math_counter_31f080 { fn default() -> _State_235_math_counter_31f080 {return _State_235_math_counter_31f080 {_237_x_7e8107: runtime::Default::default(),
_237_x_7e8107_initialized: runtime::Default::default(),};} }

impl _State_235_math_counter_31f080 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "math_counter(cond: bool): int"]
fn _235_math_counter_31f080(ctx: &PineCtx, state: &mut _State_235_math_counter_31f080, _236_cond_8e45b4: PineBool) -> PineInt {state.next();
let _237_x_7e8107 = &mut state._237_x_7e8107;
{
{
if !state._237_x_7e8107_initialized {
  *_237_x_7e8107 = <PineInt>::from(<PineInt>::from(0));
  state._237_x_7e8107_initialized = true;
}
    
if <bool>::from(_236_cond_8e45b4) {<()>::from({*_237_x_7e8107 = <PineInt>::from(*_237_x_7e8107 + <PineInt>::from(1));
*_237_x_7e8107})};
*_237_x_7e8107}}}
          

struct _State_32_lowestbars_ac0c6c {_call_279_579_lowestbars_02018c: _State_579_lowestbars_02018c,}
impl runtime::Default for _State_32_lowestbars_ac0c6c { fn default() -> _State_32_lowestbars_ac0c6c {return _State_32_lowestbars_ac0c6c {_call_279_579_lowestbars_02018c: runtime::Default::default(),};} }

impl _State_32_lowestbars_ac0c6c {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "lowestbars(src: series<float>, length: int): int"]
fn _32_lowestbars_ac0c6c(ctx: &PineCtx, state: &mut _State_32_lowestbars_ac0c6c, _33_src_0da3b0: &PineSeries::<PineFloat>, mut _34_length_7e8107: PineInt) -> PineInt {state.next();

{if runtime::Na::na(_34_length_7e8107) {_34_length_7e8107 = <PineInt>::from(14)}
{_579_lowestbars_02018c(&ctx, &mut state._call_279_579_lowestbars_02018c, &_33_src_0da3b0, _34_length_7e8107)}}}
          

struct _State_579_lowestbars_02018c {_call_5736_238_math_counter_77b090: _State_238_math_counter_77b090,}
impl runtime::Default for _State_579_lowestbars_02018c { fn default() -> _State_579_lowestbars_02018c {return _State_579_lowestbars_02018c {_call_5736_238_math_counter_77b090: runtime::Default::default(),};} }

impl _State_579_lowestbars_02018c {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "lowestbars(src: series<float>, length: int): int"]
fn _579_lowestbars_02018c(ctx: &PineCtx, state: &mut _State_579_lowestbars_02018c, _580_src_0da3b0: &PineSeries::<PineFloat>, _581_length_7e8107: PineInt) -> PineInt {state.next();

{
{let mut _582_counter_7e8107: PineInt;
_582_counter_7e8107 = <PineInt>::from(_238_math_counter_77b090(&ctx, &mut state._call_5736_238_math_counter_77b090));
if <bool>::from(<PineBool>::from(_582_counter_7e8107 < _581_length_7e8107)) {<PineInt>::from({PineNa})} else {{let mut _583_index_7e8107: PineInt;
_583_index_7e8107 = <PineInt>::from(<PineInt>::from(0));
let mut _584_value_433c11: PineFloat;
_584_value_433c11 = <PineFloat>::from(_580_src_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(0))));
{let mut _585_i_7e8107: PineInt;
_585_i_7e8107 = <PineInt>::from(<PineInt>::from(1));
while <bool>::from(<PineBool>::from(_585_i_7e8107 <= _581_length_7e8107 - <PineInt>::from(1))) {{let mut _586_x_433c11: PineFloat;
_586_x_433c11 = <PineFloat>::from(_580_src_0da3b0.get_at_offset(<usize>::from(_585_i_7e8107)));
if <bool>::from(<PineBool>::from(_586_x_433c11 <= _584_value_433c11)) {<()>::from({_584_value_433c11 = <PineFloat>::from(_586_x_433c11);;
_583_index_7e8107 = <PineInt>::from(_585_i_7e8107);
_583_index_7e8107})}}
{_585_i_7e8107 = <PineInt>::from(_585_i_7e8107 + 1.into());
_585_i_7e8107};}}
-_583_index_7e8107}}}}}
          

struct _State_35_highest_7004c3 {_call_306_591_highest_ec8c34: _State_591_highest_ec8c34,}
impl runtime::Default for _State_35_highest_7004c3 { fn default() -> _State_35_highest_7004c3 {return _State_35_highest_7004c3 {_call_306_591_highest_ec8c34: runtime::Default::default(),};} }

impl _State_35_highest_7004c3 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "highest(src: series<float>, length: int): float"]
fn _35_highest_7004c3(ctx: &PineCtx, state: &mut _State_35_highest_7004c3, _36_src_0da3b0: &PineSeries::<PineFloat>, mut _37_length_7e8107: PineInt) -> PineFloat {state.next();

{if runtime::Na::na(_37_length_7e8107) {_37_length_7e8107 = <PineInt>::from(14)}
{_591_highest_ec8c34(&ctx, &mut state._call_306_591_highest_ec8c34, &_36_src_0da3b0, _37_length_7e8107)}}}
          

struct _State_591_highest_ec8c34 {_call_5874_571_highestbars_3b748a: _State_571_highestbars_3b748a,}
impl runtime::Default for _State_591_highest_ec8c34 { fn default() -> _State_591_highest_ec8c34 {return _State_591_highest_ec8c34 {_call_5874_571_highestbars_3b748a: runtime::Default::default(),};} }

impl _State_591_highest_ec8c34 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "highest(src: series<float>, length: int): float"]
fn _591_highest_ec8c34(ctx: &PineCtx, state: &mut _State_591_highest_ec8c34, _592_src_0da3b0: &PineSeries::<PineFloat>, _593_length_7e8107: PineInt) -> PineFloat {state.next();

{
{let mut _594_idx_7e8107: PineInt;
_594_idx_7e8107 = <PineInt>::from(-_571_highestbars_3b748a(&ctx, &mut state._call_5874_571_highestbars_3b748a, &_592_src_0da3b0, _593_length_7e8107));
{let _if_then_5888 = {<PineFloat>::from(PineNa)};
let _if_else_5888 = {_592_src_0da3b0.get_at_offset(<usize>::from(_594_idx_7e8107))};
if <bool>::from(_206_global_na_aa42b4(&ctx, _594_idx_7e8107)) {_if_then_5888} else {_if_else_5888}}}}}
          

#[doc = "global_na<int>(x: int): bool"]
fn _206_global_na_aa42b4(ctx: &PineCtx, _208_x_b01ec9: PineInt) -> PineBool {return (runtime::Na::na(_208_x_b01ec9)).into();}
          

struct _State_38_lowest_948224 {_call_333_595_lowest_ffa876: _State_595_lowest_ffa876,}
impl runtime::Default for _State_38_lowest_948224 { fn default() -> _State_38_lowest_948224 {return _State_38_lowest_948224 {_call_333_595_lowest_ffa876: runtime::Default::default(),};} }

impl _State_38_lowest_948224 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "lowest(src: series<float>, length: int): float"]
fn _38_lowest_948224(ctx: &PineCtx, state: &mut _State_38_lowest_948224, _39_src_0da3b0: &PineSeries::<PineFloat>, mut _40_length_7e8107: PineInt) -> PineFloat {state.next();

{if runtime::Na::na(_40_length_7e8107) {_40_length_7e8107 = <PineInt>::from(14)}
{_595_lowest_ffa876(&ctx, &mut state._call_333_595_lowest_ffa876, &_39_src_0da3b0, _40_length_7e8107)}}}
          

struct _State_595_lowest_ffa876 {_call_5914_579_lowestbars_02018c: _State_579_lowestbars_02018c,}
impl runtime::Default for _State_595_lowest_ffa876 { fn default() -> _State_595_lowest_ffa876 {return _State_595_lowest_ffa876 {_call_5914_579_lowestbars_02018c: runtime::Default::default(),};} }

impl _State_595_lowest_ffa876 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "lowest(src: series<float>, length: int): float"]
fn _595_lowest_ffa876(ctx: &PineCtx, state: &mut _State_595_lowest_ffa876, _596_src_0da3b0: &PineSeries::<PineFloat>, _597_length_7e8107: PineInt) -> PineFloat {state.next();

{
{let mut _598_idx_7e8107: PineInt;
_598_idx_7e8107 = <PineInt>::from(-_579_lowestbars_02018c(&ctx, &mut state._call_5914_579_lowestbars_02018c, &_596_src_0da3b0, _597_length_7e8107));
{let _if_then_5928 = {<PineFloat>::from(PineNa)};
let _if_else_5928 = {_596_src_0da3b0.get_at_offset(<usize>::from(_598_idx_7e8107))};
if <bool>::from(_206_global_na_aa42b4(&ctx, _598_idx_7e8107)) {_if_then_5928} else {_if_else_5928}}}}}
          

#[doc = "swma(src: series<float>): float"]
fn _41_swma_9bc39d(ctx: &PineCtx, _42_src_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {
{_603_swma_9f9813(&ctx, &_42_src_0da3b0)}}
          

#[doc = "swma(src: series<float>): float"]
fn _603_swma_9f9813(ctx: &PineCtx, _604_src_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {
{_604_src_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(3))) * <PineFloat>::from(<PineInt>::from(1)) / <PineFloat>::from(<PineInt>::from(6)) + _604_src_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(2))) * <PineFloat>::from(<PineInt>::from(2)) / <PineFloat>::from(<PineInt>::from(6)) + _604_src_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1))) * <PineFloat>::from(<PineInt>::from(2)) / <PineFloat>::from(<PineInt>::from(6)) + _604_src_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(0))) * <PineFloat>::from(<PineInt>::from(1)) / <PineFloat>::from(<PineInt>::from(6))}}
          

struct _State_43_sma_539698 {_call_379_605_sma_26e814: _State_605_sma_26e814,}
impl runtime::Default for _State_43_sma_539698 { fn default() -> _State_43_sma_539698 {return _State_43_sma_539698 {_call_379_605_sma_26e814: runtime::Default::default(),};} }

impl _State_43_sma_539698 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "sma(src: series<float>, length: int): float"]
fn _43_sma_539698(ctx: &PineCtx, state: &mut _State_43_sma_539698, _44_src_0da3b0: &PineSeries::<PineFloat>, mut _45_length_7e8107: PineInt) -> PineFloat {state.next();

{if runtime::Na::na(_45_length_7e8107) {_45_length_7e8107 = <PineInt>::from(14)}
{_605_sma_26e814(&ctx, &mut state._call_379_605_sma_26e814, &_44_src_0da3b0, _45_length_7e8107)}}}
          

struct _State_605_sma_26e814 {_call_6049_261_math_sum_b4673a: _State_261_math_sum_b4673a,}
impl runtime::Default for _State_605_sma_26e814 { fn default() -> _State_605_sma_26e814 {return _State_605_sma_26e814 {_call_6049_261_math_sum_b4673a: runtime::Default::default(),};} }

impl _State_605_sma_26e814 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "sma(src: series<float>, length: int): float"]
fn _605_sma_26e814(ctx: &PineCtx, state: &mut _State_605_sma_26e814, _606_src_0da3b0: &PineSeries::<PineFloat>, _607_length_7e8107: PineInt) -> PineFloat {state.next();

{
{let mut _608_mean_433c11: PineFloat;
_608_mean_433c11 = <PineFloat>::from(<PineFloat>::from(PineNa));
_608_mean_433c11 = <PineFloat>::from(_261_math_sum_b4673a(&ctx, &mut state._call_6049_261_math_sum_b4673a, &_606_src_0da3b0, _607_length_7e8107) / <PineFloat>::from(_607_length_7e8107));;
_608_mean_433c11}}}
          

struct _State_261_math_sum_b4673a {_265_sum_433c11: PineFloat,
_265_sum_433c11_initialized: bool,
_call_2505_235_math_counter_31f080: _State_235_math_counter_31f080,}
impl runtime::Default for _State_261_math_sum_b4673a { fn default() -> _State_261_math_sum_b4673a {return _State_261_math_sum_b4673a {_265_sum_433c11: runtime::Default::default(),
_265_sum_433c11_initialized: runtime::Default::default(),
_call_2505_235_math_counter_31f080: runtime::Default::default(),};} }

impl _State_261_math_sum_b4673a {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "math_sum(src: series<float>, length: int): float"]
fn _261_math_sum_b4673a(ctx: &PineCtx, state: &mut _State_261_math_sum_b4673a, _262_src_0da3b0: &PineSeries::<PineFloat>, _263_length_7e8107: PineInt) -> PineFloat {state.next();
let _265_sum_433c11 = &mut state._265_sum_433c11;
{
{let mut _264_counter_7e8107: PineInt;
_264_counter_7e8107 = <PineInt>::from(_235_math_counter_31f080(&ctx, &mut state._call_2505_235_math_counter_31f080, <PineBool>::from(!_206_global_na_8182b8(&ctx, &_262_src_0da3b0))));

if !state._265_sum_433c11_initialized {
  *_265_sum_433c11 = <PineFloat>::from(<PineFloat>::from(0.0_f64));
  state._265_sum_433c11_initialized = true;
}
    
*_265_sum_433c11 = <PineFloat>::from(*_265_sum_433c11 + _209_global_nz_46c417(&ctx, _262_src_0da3b0.get()) - _209_global_nz_46c417(&ctx, _262_src_0da3b0.get_at_offset(<usize>::from(_263_length_7e8107))));;
if <bool>::from(<PineBool>::from(_264_counter_7e8107 < _263_length_7e8107)) {<PineFloat>::from({PineNa})} else {{*_265_sum_433c11}}}}}
          

struct _State_46_ema_cda730 {_call_406_609_ema_23b3fd: _State_609_ema_23b3fd,}
impl runtime::Default for _State_46_ema_cda730 { fn default() -> _State_46_ema_cda730 {return _State_46_ema_cda730 {_call_406_609_ema_23b3fd: runtime::Default::default(),};} }

impl _State_46_ema_cda730 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "ema(src: series<float>, length: int): float"]
fn _46_ema_cda730(ctx: &PineCtx, state: &mut _State_46_ema_cda730, _47_src_0da3b0: &PineSeries::<PineFloat>, mut _48_length_7e8107: PineInt) -> PineFloat {state.next();

{if runtime::Na::na(_48_length_7e8107) {_48_length_7e8107 = <PineInt>::from(14)}
{_609_ema_23b3fd(&ctx, &mut state._call_406_609_ema_23b3fd, &_47_src_0da3b0, _48_length_7e8107, <PineFloat>::from(PineNa))}}}
          

struct _State_609_ema_23b3fd {_615_prev_value_433c11: PineFloat,
_615_prev_value_433c11_initialized: bool,
_call_6093_238_math_counter_77b090: _State_238_math_counter_77b090,
_call_6125_605_sma_26e814: _State_605_sma_26e814,}
impl runtime::Default for _State_609_ema_23b3fd { fn default() -> _State_609_ema_23b3fd {return _State_609_ema_23b3fd {_615_prev_value_433c11: runtime::Default::default(),
_615_prev_value_433c11_initialized: runtime::Default::default(),
_call_6093_238_math_counter_77b090: runtime::Default::default(),
_call_6125_605_sma_26e814: runtime::Default::default(),};} }

impl _State_609_ema_23b3fd {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "ema(src: series<float>, length: int, alpha: float): float"]
fn _609_ema_23b3fd(ctx: &PineCtx, state: &mut _State_609_ema_23b3fd, _610_src_0da3b0: &PineSeries::<PineFloat>, _611_length_7e8107: PineInt, mut _612_alpha_433c11: PineFloat) -> PineFloat {state.next();
let _615_prev_value_433c11 = &mut state._615_prev_value_433c11;
{if runtime::Na::na(_612_alpha_433c11) {_612_alpha_433c11 = <PineFloat>::from(2.0_f64) / (<PineFloat>::from(_611_length_7e8107) + <PineFloat>::from(1.0_f64))}
{let mut _613_counter_7e8107: PineInt;
_613_counter_7e8107 = <PineInt>::from(_238_math_counter_77b090(&ctx, &mut state._call_6093_238_math_counter_77b090));
let mut _614_alpha_mult_433c11: PineFloat;
_614_alpha_mult_433c11 = <PineFloat>::from(<PineFloat>::from(1.0_f64) - _612_alpha_433c11);

if !state._615_prev_value_433c11_initialized {
  *_615_prev_value_433c11 = <PineFloat>::from(<PineFloat>::from(PineNa));
  state._615_prev_value_433c11_initialized = true;
}
    
if <bool>::from(<PineBool>::from(<PineBool>::from(<bool>::from(<PineBool>::from(_613_counter_7e8107 < _611_length_7e8107)) | <bool>::from(_206_global_na_39d023(&ctx, *_615_prev_value_433c11))))) {{*_615_prev_value_433c11 = <PineFloat>::from(_605_sma_26e814(&ctx, &mut state._call_6125_605_sma_26e814, &_610_src_0da3b0, _611_length_7e8107));;
*_615_prev_value_433c11}} else {if <bool>::from(_206_global_na_39d023(&ctx, *_615_prev_value_433c11)) {<PineFloat>::from({PineNa})} else {{*_615_prev_value_433c11 = <PineFloat>::from(_612_alpha_433c11 * _610_src_0da3b0.get() + _614_alpha_mult_433c11 * *_615_prev_value_433c11);;
*_615_prev_value_433c11}}}}}}
          

struct _State_49_rma_29445f {_call_433_616_rma_42d3a4: _State_616_rma_42d3a4,}
impl runtime::Default for _State_49_rma_29445f { fn default() -> _State_49_rma_29445f {return _State_49_rma_29445f {_call_433_616_rma_42d3a4: runtime::Default::default(),};} }

impl _State_49_rma_29445f {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "rma(src: series<float>, length: int): float"]
fn _49_rma_29445f(ctx: &PineCtx, state: &mut _State_49_rma_29445f, _50_src_0da3b0: &PineSeries::<PineFloat>, mut _51_length_7e8107: PineInt) -> PineFloat {state.next();

{if runtime::Na::na(_51_length_7e8107) {_51_length_7e8107 = <PineInt>::from(14)}
{_616_rma_42d3a4(&ctx, &mut state._call_433_616_rma_42d3a4, &_50_src_0da3b0, _51_length_7e8107)}}}
          

struct _State_616_rma_42d3a4 {_call_6191_609_ema_23b3fd: _State_609_ema_23b3fd,}
impl runtime::Default for _State_616_rma_42d3a4 { fn default() -> _State_616_rma_42d3a4 {return _State_616_rma_42d3a4 {_call_6191_609_ema_23b3fd: runtime::Default::default(),};} }

impl _State_616_rma_42d3a4 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "rma(src: series<float>, length: int): float"]
fn _616_rma_42d3a4(ctx: &PineCtx, state: &mut _State_616_rma_42d3a4, _617_src_0da3b0: &PineSeries::<PineFloat>, _618_length_7e8107: PineInt) -> PineFloat {state.next();

{
{_609_ema_23b3fd(&ctx, &mut state._call_6191_609_ema_23b3fd, &_617_src_0da3b0, _618_length_7e8107, <PineFloat>::from(1.0_f64) / <PineFloat>::from(_618_length_7e8107))}}}
          

#[doc = "wma(src: series<float>, length: int): float"]
fn _52_wma_f65ce1(ctx: &PineCtx, _53_src_0da3b0: &PineSeries::<PineFloat>, mut _54_length_7e8107: PineInt) -> PineFloat {if runtime::Na::na(_54_length_7e8107) {_54_length_7e8107 = <PineInt>::from(14)}
{_619_wma_350788(&ctx, &_53_src_0da3b0, _54_length_7e8107)}}
          

#[doc = "wma(src: series<float>, length: int): float"]
fn _619_wma_350788(ctx: &PineCtx, _620_src_0da3b0: &PineSeries::<PineFloat>, _621_length_7e8107: PineInt) -> PineFloat {
{let mut _622_norm_433c11: PineFloat;
_622_norm_433c11 = <PineFloat>::from(<PineFloat>::from(0.0_f64));
let mut _623_sum_433c11: PineFloat;
_623_sum_433c11 = <PineFloat>::from(<PineFloat>::from(0.0_f64));
{let mut _624_i_7e8107: PineInt;
_624_i_7e8107 = <PineInt>::from(<PineInt>::from(0));
while <bool>::from(<PineBool>::from(_624_i_7e8107 <= _621_length_7e8107 - <PineInt>::from(1))) {{let mut _625_weight_433c11: PineFloat;
_625_weight_433c11 = <PineFloat>::from(<PineFloat>::from((_621_length_7e8107 - _624_i_7e8107) * _621_length_7e8107));
_622_norm_433c11 = <PineFloat>::from(_622_norm_433c11 + _625_weight_433c11);;
_623_sum_433c11 = <PineFloat>::from(_623_sum_433c11 + _620_src_0da3b0.get_at_offset(<usize>::from(_624_i_7e8107)) * _625_weight_433c11);}
{_624_i_7e8107 = <PineInt>::from(_624_i_7e8107 + 1.into());
_624_i_7e8107};}}
_623_sum_433c11 / _622_norm_433c11}}
          

#[doc = "lwma(src: series<float>, length: int): float"]
fn _55_lwma_861fb5(ctx: &PineCtx, _56_src_0da3b0: &PineSeries::<PineFloat>, mut _57_length_7e8107: PineInt) -> PineFloat {if runtime::Na::na(_57_length_7e8107) {_57_length_7e8107 = <PineInt>::from(14)}
{_626_lwma_a1c64e(&ctx, &_56_src_0da3b0, _57_length_7e8107)}}
          

#[doc = "lwma(src: series<float>, length: int): float"]
fn _626_lwma_a1c64e(ctx: &PineCtx, _627_src_0da3b0: &PineSeries::<PineFloat>, _628_length_7e8107: PineInt) -> PineFloat {
{let mut _629_sumw_433c11: PineFloat;
_629_sumw_433c11 = <PineFloat>::from(<PineFloat>::from(0.0_f64));
let mut _630_sum_433c11: PineFloat;
_630_sum_433c11 = <PineFloat>::from(<PineFloat>::from(0.0_f64));
{let mut _631_i_7e8107: PineInt;
_631_i_7e8107 = <PineInt>::from(<PineInt>::from(0));
while <bool>::from(<PineBool>::from(_631_i_7e8107 <= _628_length_7e8107 - <PineInt>::from(1))) {{let mut _632_weight_433c11: PineFloat;
_632_weight_433c11 = <PineFloat>::from(<PineFloat>::from((_628_length_7e8107 - _631_i_7e8107) * _628_length_7e8107));
_629_sumw_433c11 = <PineFloat>::from(_629_sumw_433c11 + _632_weight_433c11);;
_630_sum_433c11 = <PineFloat>::from(_630_sum_433c11 + _627_src_0da3b0.get_at_offset(<usize>::from(_631_i_7e8107)) * _632_weight_433c11);}
{_631_i_7e8107 = <PineInt>::from(_631_i_7e8107 + 1.into());
_631_i_7e8107};}}
_630_sum_433c11 / _629_sumw_433c11}}
          

struct _State_58_hma_893fb4 {_call_514_633_hma_972121: _State_633_hma_972121,}
impl runtime::Default for _State_58_hma_893fb4 { fn default() -> _State_58_hma_893fb4 {return _State_58_hma_893fb4 {_call_514_633_hma_972121: runtime::Default::default(),};} }

impl _State_58_hma_893fb4 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "hma(src: series<float>, length: int): float"]
fn _58_hma_893fb4(ctx: &PineCtx, state: &mut _State_58_hma_893fb4, _59_src_0da3b0: &PineSeries::<PineFloat>, mut _60_length_7e8107: PineInt) -> PineFloat {state.next();

{if runtime::Na::na(_60_length_7e8107) {_60_length_7e8107 = <PineInt>::from(14)}
{_633_hma_972121(&ctx, &mut state._call_514_633_hma_972121, &_59_src_0da3b0, _60_length_7e8107)}}}
          

struct _State_633_hma_972121 {_746_series_expr_6407_src_0da3b0: PineSeries::<PineFloat>,
_746_series_expr_6407_src_0da3b0_initialized: bool,
_781_series_expr_6407_src_0da3b0: PineSeries::<PineFloat>,
_781_series_expr_6407_src_0da3b0_initialized: bool,}
impl runtime::Default for _State_633_hma_972121 { fn default() -> _State_633_hma_972121 {return _State_633_hma_972121 {_746_series_expr_6407_src_0da3b0: runtime::Default::default(),
_746_series_expr_6407_src_0da3b0_initialized: runtime::Default::default(),
_781_series_expr_6407_src_0da3b0: runtime::Default::default(),
_781_series_expr_6407_src_0da3b0_initialized: runtime::Default::default(),};} }

impl _State_633_hma_972121 {
  #[inline]
  fn next(&mut self) {
    self._746_series_expr_6407_src_0da3b0.next();
self._781_series_expr_6407_src_0da3b0.next();
  }
}
    

#[doc = "hma(src: series<float>, length: int): float"]
fn _633_hma_972121(ctx: &PineCtx, state: &mut _State_633_hma_972121, _634_src_0da3b0: &PineSeries::<PineFloat>, _635_length_7e8107: PineInt) -> PineFloat {state.next();
let _746_series_expr_6407_src_0da3b0 = &mut state._746_series_expr_6407_src_0da3b0;
let _781_series_expr_6407_src_0da3b0 = &mut state._781_series_expr_6407_src_0da3b0;
{
{let mut _636_lwma_half_433c11: PineFloat;
_636_lwma_half_433c11 = <PineFloat>::from(_626_lwma_a1c64e(&ctx, &_634_src_0da3b0, _635_length_7e8107 / <PineInt>::from(2)));
let mut _637_lwma_per_433c11: PineFloat;
_637_lwma_per_433c11 = <PineFloat>::from(_626_lwma_a1c64e(&ctx, &_634_src_0da3b0, _635_length_7e8107));
let mut _638_price1_433c11: PineFloat;
_638_price1_433c11 = <PineFloat>::from(<PineFloat>::from(2.0_f64) * _636_lwma_half_433c11 - _637_lwma_per_433c11);
let mut _639_l_433c11: PineFloat;
_639_l_433c11 = <PineFloat>::from(_251_math_sqrt_1fecea(&ctx, <PineFloat>::from(_635_length_7e8107)));
let mut _640_lwma_hull_433c11: PineFloat;
_640_lwma_hull_433c11 = <PineFloat>::from(_626_lwma_a1c64e(&ctx, {{
_781_series_expr_6407_src_0da3b0.set(<PineFloat>::from(_638_price1_433c11));}
&_781_series_expr_6407_src_0da3b0}, <PineInt>::from(_639_l_433c11)));
_640_lwma_hull_433c11}}}
          

#[doc = "math_sqrt(x: float): float"]
fn _251_math_sqrt_1fecea(ctx: &PineCtx, _252_x_433c11: PineFloat) -> PineFloat {return (f64::sqrt((_252_x_433c11).into())).into();}
          

struct _State_61_vwma_083794 {_call_541_641_vwma_3efb99: _State_641_vwma_3efb99,}
impl runtime::Default for _State_61_vwma_083794 { fn default() -> _State_61_vwma_083794 {return _State_61_vwma_083794 {_call_541_641_vwma_3efb99: runtime::Default::default(),};} }

impl _State_61_vwma_083794 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "vwma(src: series<float>, length: int): float"]
fn _61_vwma_083794(ctx: &PineCtx, state: &mut _State_61_vwma_083794, _62_src_0da3b0: &PineSeries::<PineFloat>, mut _63_length_7e8107: PineInt, _4_volume_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {state.next();

{if runtime::Na::na(_63_length_7e8107) {_63_length_7e8107 = <PineInt>::from(14)}
{_641_vwma_3efb99(&ctx, &mut state._call_541_641_vwma_3efb99, &_62_src_0da3b0, _63_length_7e8107, &_4_volume_0da3b0)}}}
          

struct _State_641_vwma_3efb99 {_747_series_expr_6441_src_0da3b0: PineSeries::<PineFloat>,
_747_series_expr_6441_src_0da3b0_initialized: bool,
_782_series_expr_6441_src_0da3b0: PineSeries::<PineFloat>,
_782_series_expr_6441_src_0da3b0_initialized: bool,
_call_6443_605_sma_26e814: _State_605_sma_26e814,
_call_6447_605_sma_26e814: _State_605_sma_26e814,}
impl runtime::Default for _State_641_vwma_3efb99 { fn default() -> _State_641_vwma_3efb99 {return _State_641_vwma_3efb99 {_747_series_expr_6441_src_0da3b0: runtime::Default::default(),
_747_series_expr_6441_src_0da3b0_initialized: runtime::Default::default(),
_782_series_expr_6441_src_0da3b0: runtime::Default::default(),
_782_series_expr_6441_src_0da3b0_initialized: runtime::Default::default(),
_call_6443_605_sma_26e814: runtime::Default::default(),
_call_6447_605_sma_26e814: runtime::Default::default(),};} }

impl _State_641_vwma_3efb99 {
  #[inline]
  fn next(&mut self) {
    self._747_series_expr_6441_src_0da3b0.next();
self._782_series_expr_6441_src_0da3b0.next();
  }
}
    

#[doc = "vwma(src: series<float>, length: int): float"]
fn _641_vwma_3efb99(ctx: &PineCtx, state: &mut _State_641_vwma_3efb99, _642_src_0da3b0: &PineSeries::<PineFloat>, _643_length_7e8107: PineInt, _4_volume_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {state.next();
let _747_series_expr_6441_src_0da3b0 = &mut state._747_series_expr_6441_src_0da3b0;
let _782_series_expr_6441_src_0da3b0 = &mut state._782_series_expr_6441_src_0da3b0;
{
{_605_sma_26e814(&ctx, &mut state._call_6443_605_sma_26e814, {{
_782_series_expr_6441_src_0da3b0.set(<PineFloat>::from(_642_src_0da3b0.get() * _4_volume_0da3b0.get()));}
&_782_series_expr_6441_src_0da3b0}, _643_length_7e8107) / _605_sma_26e814(&ctx, &mut state._call_6447_605_sma_26e814, &_4_volume_0da3b0, _643_length_7e8107)}}}
          

struct _State_64_dev_3840e2 {_call_568_644_dev_b9b5ba: _State_644_dev_b9b5ba,}
impl runtime::Default for _State_64_dev_3840e2 { fn default() -> _State_64_dev_3840e2 {return _State_64_dev_3840e2 {_call_568_644_dev_b9b5ba: runtime::Default::default(),};} }

impl _State_64_dev_3840e2 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "dev(src: series<float>, length: int): float"]
fn _64_dev_3840e2(ctx: &PineCtx, state: &mut _State_64_dev_3840e2, _65_src_0da3b0: &PineSeries::<PineFloat>, mut _66_length_7e8107: PineInt) -> PineFloat {state.next();

{if runtime::Na::na(_66_length_7e8107) {_66_length_7e8107 = <PineInt>::from(14)}
{_644_dev_b9b5ba(&ctx, &mut state._call_568_644_dev_b9b5ba, &_65_src_0da3b0, _66_length_7e8107)}}}
          

struct _State_644_dev_b9b5ba {_call_6474_605_sma_26e814: _State_605_sma_26e814,}
impl runtime::Default for _State_644_dev_b9b5ba { fn default() -> _State_644_dev_b9b5ba {return _State_644_dev_b9b5ba {_call_6474_605_sma_26e814: runtime::Default::default(),};} }

impl _State_644_dev_b9b5ba {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "dev(src: series<float>, length: int): float"]
fn _644_dev_b9b5ba(ctx: &PineCtx, state: &mut _State_644_dev_b9b5ba, _645_src_0da3b0: &PineSeries::<PineFloat>, _646_length_7e8107: PineInt) -> PineFloat {state.next();

{
{let mut _647_mean_433c11: PineFloat;
_647_mean_433c11 = <PineFloat>::from(_605_sma_26e814(&ctx, &mut state._call_6474_605_sma_26e814, &_645_src_0da3b0, _646_length_7e8107));
let mut _648_sum_433c11: PineFloat;
_648_sum_433c11 = <PineFloat>::from(<PineFloat>::from(0.0_f64));
{let mut _649_i_7e8107: PineInt;
_649_i_7e8107 = <PineInt>::from(<PineInt>::from(0));
while <bool>::from(<PineBool>::from(_649_i_7e8107 <= _646_length_7e8107 - <PineInt>::from(1))) {{_648_sum_433c11 = <PineFloat>::from(_648_sum_433c11 + _249_math_abs_b87bee(&ctx, _645_src_0da3b0.get_at_offset(<usize>::from(_649_i_7e8107)) - _647_mean_433c11));}
{_649_i_7e8107 = <PineInt>::from(_649_i_7e8107 + 1.into());
_649_i_7e8107};}}
_648_sum_433c11 / <PineFloat>::from(_646_length_7e8107)}}}
          

#[doc = "math_abs(x: float): float"]
fn _249_math_abs_b87bee(ctx: &PineCtx, _250_x_433c11: PineFloat) -> PineFloat {return (f64::abs((_250_x_433c11).into())).into();}
          

#[doc = "tr(handle_na: bool): float"]
fn _67_tr_6fecfd(ctx: &PineCtx, mut _68_handle_na_8e45b4: PineBool, _1_high_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>, _3_close_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {if runtime::Na::na(_68_handle_na_8e45b4) {_68_handle_na_8e45b4 = <PineBool>::from(true)}
{_650_tr_a2fdc2(&ctx, _68_handle_na_8e45b4, &_1_high_0da3b0, &_2_low_0da3b0, &_3_close_0da3b0)}}
          

#[doc = "tr(handle_na: bool): float"]
fn _650_tr_a2fdc2(ctx: &PineCtx, _651_handle_na_8e45b4: PineBool, _1_high_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>, _3_close_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {
{if <bool>::from(<PineBool>::from(<PineBool>::from(<bool>::from(<PineBool>::from(<PineBool>::from(<bool>::from(_206_global_na_39d023(&ctx, _1_high_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1))))) | <bool>::from(_206_global_na_39d023(&ctx, _2_low_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1)))))))) | <bool>::from(_206_global_na_39d023(&ctx, _3_close_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1)))))))) {{{let _if_then_6548 = {_1_high_0da3b0.get() - _2_low_0da3b0.get()};
let _if_else_6548 = {<PineFloat>::from(PineNa)};
if <bool>::from(_651_handle_na_8e45b4) {_if_then_6548} else {_if_else_6548}}}} else {{_242_math_max_5b0224(&ctx, _242_math_max_5b0224(&ctx, _1_high_0da3b0.get() - _2_low_0da3b0.get(), _249_math_abs_b87bee(&ctx, _1_high_0da3b0.get() - _3_close_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1))))), _249_math_abs_b87bee(&ctx, _2_low_0da3b0.get() - _3_close_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1)))))}}}}
          

#[doc = "math_max(x: float, y: float): float"]
fn _242_math_max_5b0224(ctx: &PineCtx, _243_x_433c11: PineFloat, _244_y_433c11: PineFloat) -> PineFloat {
{if <bool>::from(<PineBool>::from(<PineBool>::from(<bool>::from(_206_global_na_39d023(&ctx, _243_x_433c11)) | <bool>::from(_206_global_na_39d023(&ctx, _244_y_433c11))))) {<PineFloat>::from({PineNa})} else {{if <bool>::from(<PineBool>::from(_243_x_433c11 >= _244_y_433c11)) {{_243_x_433c11}} else {{_244_y_433c11}}}}}}
          

struct _State_69_atr_2c80de {_call_606_652_atr_cb2705: _State_652_atr_cb2705,}
impl runtime::Default for _State_69_atr_2c80de { fn default() -> _State_69_atr_2c80de {return _State_69_atr_2c80de {_call_606_652_atr_cb2705: runtime::Default::default(),};} }

impl _State_69_atr_2c80de {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "atr(length: int): float"]
fn _69_atr_2c80de(ctx: &PineCtx, state: &mut _State_69_atr_2c80de, mut _70_length_7e8107: PineInt, _1_high_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>, _3_close_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {state.next();

{if runtime::Na::na(_70_length_7e8107) {_70_length_7e8107 = <PineInt>::from(14)}
{_652_atr_cb2705(&ctx, &mut state._call_606_652_atr_cb2705, _70_length_7e8107, &_1_high_0da3b0, &_2_low_0da3b0, &_3_close_0da3b0)}}}
          

struct _State_652_atr_cb2705 {_748_series_expr_6605_src_0da3b0: PineSeries::<PineFloat>,
_748_series_expr_6605_src_0da3b0_initialized: bool,
_751_series_expr_6605_src_0da3b0: PineSeries::<PineFloat>,
_751_series_expr_6605_src_0da3b0_initialized: bool,
_756_series_expr_6605_src_0da3b0: PineSeries::<PineFloat>,
_756_series_expr_6605_src_0da3b0_initialized: bool,
_757_series_expr_6605_src_0da3b0: PineSeries::<PineFloat>,
_757_series_expr_6605_src_0da3b0_initialized: bool,
_761_series_expr_6605_src_0da3b0: PineSeries::<PineFloat>,
_761_series_expr_6605_src_0da3b0_initialized: bool,
_780_series_expr_6605_src_0da3b0: PineSeries::<PineFloat>,
_780_series_expr_6605_src_0da3b0_initialized: bool,
_783_series_expr_6605_src_0da3b0: PineSeries::<PineFloat>,
_783_series_expr_6605_src_0da3b0_initialized: bool,
_786_series_expr_6605_src_0da3b0: PineSeries::<PineFloat>,
_786_series_expr_6605_src_0da3b0_initialized: bool,
_787_series_expr_6605_src_0da3b0: PineSeries::<PineFloat>,
_787_series_expr_6605_src_0da3b0_initialized: bool,
_call_6607_616_rma_42d3a4: _State_616_rma_42d3a4,}
impl runtime::Default for _State_652_atr_cb2705 { fn default() -> _State_652_atr_cb2705 {return _State_652_atr_cb2705 {_748_series_expr_6605_src_0da3b0: runtime::Default::default(),
_748_series_expr_6605_src_0da3b0_initialized: runtime::Default::default(),
_751_series_expr_6605_src_0da3b0: runtime::Default::default(),
_751_series_expr_6605_src_0da3b0_initialized: runtime::Default::default(),
_756_series_expr_6605_src_0da3b0: runtime::Default::default(),
_756_series_expr_6605_src_0da3b0_initialized: runtime::Default::default(),
_757_series_expr_6605_src_0da3b0: runtime::Default::default(),
_757_series_expr_6605_src_0da3b0_initialized: runtime::Default::default(),
_761_series_expr_6605_src_0da3b0: runtime::Default::default(),
_761_series_expr_6605_src_0da3b0_initialized: runtime::Default::default(),
_780_series_expr_6605_src_0da3b0: runtime::Default::default(),
_780_series_expr_6605_src_0da3b0_initialized: runtime::Default::default(),
_783_series_expr_6605_src_0da3b0: runtime::Default::default(),
_783_series_expr_6605_src_0da3b0_initialized: runtime::Default::default(),
_786_series_expr_6605_src_0da3b0: runtime::Default::default(),
_786_series_expr_6605_src_0da3b0_initialized: runtime::Default::default(),
_787_series_expr_6605_src_0da3b0: runtime::Default::default(),
_787_series_expr_6605_src_0da3b0_initialized: runtime::Default::default(),
_call_6607_616_rma_42d3a4: runtime::Default::default(),};} }

impl _State_652_atr_cb2705 {
  #[inline]
  fn next(&mut self) {
    self._748_series_expr_6605_src_0da3b0.next();
self._751_series_expr_6605_src_0da3b0.next();
self._756_series_expr_6605_src_0da3b0.next();
self._757_series_expr_6605_src_0da3b0.next();
self._761_series_expr_6605_src_0da3b0.next();
self._780_series_expr_6605_src_0da3b0.next();
self._783_series_expr_6605_src_0da3b0.next();
self._786_series_expr_6605_src_0da3b0.next();
self._787_series_expr_6605_src_0da3b0.next();
  }
}
    

#[doc = "atr(length: int): float"]
fn _652_atr_cb2705(ctx: &PineCtx, state: &mut _State_652_atr_cb2705, _653_length_7e8107: PineInt, _1_high_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>, _3_close_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {state.next();
let _748_series_expr_6605_src_0da3b0 = &mut state._748_series_expr_6605_src_0da3b0;
let _751_series_expr_6605_src_0da3b0 = &mut state._751_series_expr_6605_src_0da3b0;
let _756_series_expr_6605_src_0da3b0 = &mut state._756_series_expr_6605_src_0da3b0;
let _757_series_expr_6605_src_0da3b0 = &mut state._757_series_expr_6605_src_0da3b0;
let _761_series_expr_6605_src_0da3b0 = &mut state._761_series_expr_6605_src_0da3b0;
let _780_series_expr_6605_src_0da3b0 = &mut state._780_series_expr_6605_src_0da3b0;
let _783_series_expr_6605_src_0da3b0 = &mut state._783_series_expr_6605_src_0da3b0;
let _786_series_expr_6605_src_0da3b0 = &mut state._786_series_expr_6605_src_0da3b0;
let _787_series_expr_6605_src_0da3b0 = &mut state._787_series_expr_6605_src_0da3b0;
{
{_616_rma_42d3a4(&ctx, &mut state._call_6607_616_rma_42d3a4, {{
_787_series_expr_6605_src_0da3b0.set(<PineFloat>::from(_650_tr_a2fdc2(&ctx, <PineBool>::from(true), &_1_high_0da3b0, &_2_low_0da3b0, &_3_close_0da3b0)));}
&_787_series_expr_6605_src_0da3b0}, _653_length_7e8107)}}}
          

struct _State_71_rsi_9b9849 {_call_633_654_rsi_4bdedd: _State_654_rsi_4bdedd,}
impl runtime::Default for _State_71_rsi_9b9849 { fn default() -> _State_71_rsi_9b9849 {return _State_71_rsi_9b9849 {_call_633_654_rsi_4bdedd: runtime::Default::default(),};} }

impl _State_71_rsi_9b9849 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "rsi(src: series<float>, length: int): float"]
fn _71_rsi_9b9849(ctx: &PineCtx, state: &mut _State_71_rsi_9b9849, _72_src_0da3b0: &PineSeries::<PineFloat>, mut _73_length_7e8107: PineInt) -> PineFloat {state.next();

{if runtime::Na::na(_73_length_7e8107) {_73_length_7e8107 = <PineInt>::from(14)}
{_654_rsi_4bdedd(&ctx, &mut state._call_633_654_rsi_4bdedd, &_72_src_0da3b0, _73_length_7e8107)}}}
          

struct _State_654_rsi_4bdedd {_749_series_expr_6661_src_0da3b0: PineSeries::<PineFloat>,
_749_series_expr_6661_src_0da3b0_initialized: bool,
_750_series_expr_6665_src_0da3b0: PineSeries::<PineFloat>,
_750_series_expr_6665_src_0da3b0_initialized: bool,
_784_series_expr_6661_src_0da3b0: PineSeries::<PineFloat>,
_784_series_expr_6661_src_0da3b0_initialized: bool,
_785_series_expr_6665_src_0da3b0: PineSeries::<PineFloat>,
_785_series_expr_6665_src_0da3b0_initialized: bool,
_call_6663_616_rma_42d3a4: _State_616_rma_42d3a4,
_call_6667_616_rma_42d3a4: _State_616_rma_42d3a4,}
impl runtime::Default for _State_654_rsi_4bdedd { fn default() -> _State_654_rsi_4bdedd {return _State_654_rsi_4bdedd {_749_series_expr_6661_src_0da3b0: runtime::Default::default(),
_749_series_expr_6661_src_0da3b0_initialized: runtime::Default::default(),
_750_series_expr_6665_src_0da3b0: runtime::Default::default(),
_750_series_expr_6665_src_0da3b0_initialized: runtime::Default::default(),
_784_series_expr_6661_src_0da3b0: runtime::Default::default(),
_784_series_expr_6661_src_0da3b0_initialized: runtime::Default::default(),
_785_series_expr_6665_src_0da3b0: runtime::Default::default(),
_785_series_expr_6665_src_0da3b0_initialized: runtime::Default::default(),
_call_6663_616_rma_42d3a4: runtime::Default::default(),
_call_6667_616_rma_42d3a4: runtime::Default::default(),};} }

impl _State_654_rsi_4bdedd {
  #[inline]
  fn next(&mut self) {
    self._749_series_expr_6661_src_0da3b0.next();
self._750_series_expr_6665_src_0da3b0.next();
self._784_series_expr_6661_src_0da3b0.next();
self._785_series_expr_6665_src_0da3b0.next();
  }
}
    

#[doc = "rsi(src: series<float>, length: int): float"]
fn _654_rsi_4bdedd(ctx: &PineCtx, state: &mut _State_654_rsi_4bdedd, _655_src_0da3b0: &PineSeries::<PineFloat>, _656_length_7e8107: PineInt) -> PineFloat {state.next();
let _749_series_expr_6661_src_0da3b0 = &mut state._749_series_expr_6661_src_0da3b0;
let _750_series_expr_6665_src_0da3b0 = &mut state._750_series_expr_6665_src_0da3b0;
let _784_series_expr_6661_src_0da3b0 = &mut state._784_series_expr_6661_src_0da3b0;
let _785_series_expr_6665_src_0da3b0 = &mut state._785_series_expr_6665_src_0da3b0;
{
{let mut _657_u_433c11: PineFloat;
_657_u_433c11 = <PineFloat>::from(_242_math_max_5b0224(&ctx, _655_src_0da3b0.get() - _655_src_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1))), <PineFloat>::from(0.0_f64)));
let mut _658_d_433c11: PineFloat;
_658_d_433c11 = <PineFloat>::from(_242_math_max_5b0224(&ctx, _655_src_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1))) - _655_src_0da3b0.get(), <PineFloat>::from(0.0_f64)));
let mut _659_rs_433c11: PineFloat;
_659_rs_433c11 = <PineFloat>::from(_616_rma_42d3a4(&ctx, &mut state._call_6663_616_rma_42d3a4, {{
_784_series_expr_6661_src_0da3b0.set(<PineFloat>::from(_657_u_433c11));}
&_784_series_expr_6661_src_0da3b0}, _656_length_7e8107) / _616_rma_42d3a4(&ctx, &mut state._call_6667_616_rma_42d3a4, {{
_785_series_expr_6665_src_0da3b0.set(<PineFloat>::from(_658_d_433c11));}
&_785_series_expr_6665_src_0da3b0}, _656_length_7e8107));
let mut _660_res_433c11: PineFloat;
_660_res_433c11 = <PineFloat>::from(<PineFloat>::from(<PineInt>::from(100)) - <PineFloat>::from(<PineInt>::from(100)) / (<PineFloat>::from(<PineInt>::from(1)) + _659_rs_433c11));
_660_res_433c11}}}
          

struct _State_74_cci_2fd7e2 {_call_660_661_cci_1f6b74: _State_661_cci_1f6b74,}
impl runtime::Default for _State_74_cci_2fd7e2 { fn default() -> _State_74_cci_2fd7e2 {return _State_74_cci_2fd7e2 {_call_660_661_cci_1f6b74: runtime::Default::default(),};} }

impl _State_74_cci_2fd7e2 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "cci(src: series<float>, length: int): series<float>"]
fn _74_cci_2fd7e2(ctx: &PineCtx, state: &mut _State_74_cci_2fd7e2, _75_src_0da3b0: &PineSeries::<PineFloat>, mut _76_length_7e8107: PineInt) -> PineFloat {state.next();

{if runtime::Na::na(_76_length_7e8107) {_76_length_7e8107 = <PineInt>::from(14)}
{_661_cci_1f6b74(&ctx, &mut state._call_660_661_cci_1f6b74, &_75_src_0da3b0, _76_length_7e8107)}}}
          

struct _State_661_cci_1f6b74 {_666_cci_0da3b0: PineSeries::<PineFloat>,
_666_cci_0da3b0_initialized: bool,
_call_6710_605_sma_26e814: _State_605_sma_26e814,
_call_6719_644_dev_b9b5ba: _State_644_dev_b9b5ba,}
impl runtime::Default for _State_661_cci_1f6b74 { fn default() -> _State_661_cci_1f6b74 {return _State_661_cci_1f6b74 {_666_cci_0da3b0: runtime::Default::default(),
_666_cci_0da3b0_initialized: runtime::Default::default(),
_call_6710_605_sma_26e814: runtime::Default::default(),
_call_6719_644_dev_b9b5ba: runtime::Default::default(),};} }

impl _State_661_cci_1f6b74 {
  #[inline]
  fn next(&mut self) {
    self._666_cci_0da3b0.next();
  }
}
    

#[doc = "cci(src: series<float>, length: int): series<float>"]
fn _661_cci_1f6b74(ctx: &PineCtx, state: &mut _State_661_cci_1f6b74, _662_src_0da3b0: &PineSeries::<PineFloat>, _663_length_7e8107: PineInt) -> PineFloat {state.next();
let _666_cci_0da3b0 = &mut state._666_cci_0da3b0;
{
{let mut _664_ma_433c11: PineFloat;
_664_ma_433c11 = <PineFloat>::from(_605_sma_26e814(&ctx, &mut state._call_6710_605_sma_26e814, &_662_src_0da3b0, _663_length_7e8107));
let mut _665_dev_433c11: PineFloat;
_665_dev_433c11 = <PineFloat>::from(_644_dev_b9b5ba(&ctx, &mut state._call_6719_644_dev_b9b5ba, &_662_src_0da3b0, _663_length_7e8107));
_666_cci_0da3b0.set(<PineFloat>::from((_662_src_0da3b0.get() - _664_ma_433c11) / (<PineFloat>::from(0.015_f64) * _665_dev_433c11)));
_666_cci_0da3b0.get()}}}
          

struct _State_77_aroon_dc49ff {_call_677_667_aroon_89e9af: _State_667_aroon_89e9af,}
impl runtime::Default for _State_77_aroon_dc49ff { fn default() -> _State_77_aroon_dc49ff {return _State_77_aroon_dc49ff {_call_677_667_aroon_89e9af: runtime::Default::default(),};} }

impl _State_77_aroon_dc49ff {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "aroon(length: int): (float, float)"]
fn _77_aroon_dc49ff(ctx: &PineCtx, state: &mut _State_77_aroon_dc49ff, mut _78_length_7e8107: PineInt, _1_high_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>) -> (PineFloat, PineFloat) {state.next();

{if runtime::Na::na(_78_length_7e8107) {_78_length_7e8107 = <PineInt>::from(14)}
{_667_aroon_89e9af(&ctx, &mut state._call_677_667_aroon_89e9af, _78_length_7e8107, &_1_high_0da3b0, &_2_low_0da3b0)}}}
          

struct _State_667_aroon_89e9af {_call_6756_571_highestbars_3b748a: _State_571_highestbars_3b748a,
_call_6774_579_lowestbars_02018c: _State_579_lowestbars_02018c,}
impl runtime::Default for _State_667_aroon_89e9af { fn default() -> _State_667_aroon_89e9af {return _State_667_aroon_89e9af {_call_6756_571_highestbars_3b748a: runtime::Default::default(),
_call_6774_579_lowestbars_02018c: runtime::Default::default(),};} }

impl _State_667_aroon_89e9af {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "aroon(length: int): (float, float)"]
fn _667_aroon_89e9af(ctx: &PineCtx, state: &mut _State_667_aroon_89e9af, _668_length_7e8107: PineInt, _1_high_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>) -> (PineFloat, PineFloat) {state.next();

{
{let mut _669_upper_433c11: PineFloat;
_669_upper_433c11 = <PineFloat>::from(<PineFloat>::from(<PineInt>::from(100) * (_571_highestbars_3b748a(&ctx, &mut state._call_6756_571_highestbars_3b748a, &_1_high_0da3b0, _668_length_7e8107 + <PineInt>::from(1)) + _668_length_7e8107) / _668_length_7e8107));
let mut _670_lower_433c11: PineFloat;
_670_lower_433c11 = <PineFloat>::from(<PineFloat>::from(<PineInt>::from(100) * (_579_lowestbars_02018c(&ctx, &mut state._call_6774_579_lowestbars_02018c, &_2_low_0da3b0, _668_length_7e8107 + <PineInt>::from(1)) + _668_length_7e8107) / _668_length_7e8107));
(_669_upper_433c11, _670_lower_433c11)}}}
          

struct _State_79_supertrend_d7065b {_call_706_734_supertrend_13bff4: _State_734_supertrend_13bff4,}
impl runtime::Default for _State_79_supertrend_d7065b { fn default() -> _State_79_supertrend_d7065b {return _State_79_supertrend_d7065b {_call_706_734_supertrend_13bff4: runtime::Default::default(),};} }

impl _State_79_supertrend_d7065b {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "supertrend(src: series<float>, factor: float, atr_period: int): (float, int)"]
fn _79_supertrend_d7065b(ctx: &PineCtx, state: &mut _State_79_supertrend_d7065b, _80_src_0da3b0: &PineSeries::<PineFloat>, _81_factor_433c11: PineFloat, _82_atr_period_7e8107: PineInt, _3_close_0da3b0: &PineSeries::<PineFloat>, _1_high_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>) -> (PineFloat, PineInt) {state.next();

{
{_734_supertrend_13bff4(&ctx, &mut state._call_706_734_supertrend_13bff4, &_80_src_0da3b0, _81_factor_433c11, _82_atr_period_7e8107, &_3_close_0da3b0, &_1_high_0da3b0, &_2_low_0da3b0)}}}
          

struct _State_734_supertrend_13bff4 {_739_upperBand_0da3b0: PineSeries::<PineFloat>,
_739_upperBand_0da3b0_initialized: bool,
_740_lowerBand_0da3b0: PineSeries::<PineFloat>,
_740_lowerBand_0da3b0_initialized: bool,
_752_index_op_expr_7649_0da3b0: PineSeries::<PineFloat>,
_752_index_op_expr_7649_0da3b0_initialized: bool,
_753_index_op_expr_7654_0da3b0: PineSeries::<PineFloat>,
_753_index_op_expr_7654_0da3b0_initialized: bool,
_call_7555_652_atr_cb2705: _State_652_atr_cb2705,}
impl runtime::Default for _State_734_supertrend_13bff4 { fn default() -> _State_734_supertrend_13bff4 {return _State_734_supertrend_13bff4 {_739_upperBand_0da3b0: runtime::Default::default(),
_739_upperBand_0da3b0_initialized: runtime::Default::default(),
_740_lowerBand_0da3b0: runtime::Default::default(),
_740_lowerBand_0da3b0_initialized: runtime::Default::default(),
_752_index_op_expr_7649_0da3b0: runtime::Default::default(),
_752_index_op_expr_7649_0da3b0_initialized: runtime::Default::default(),
_753_index_op_expr_7654_0da3b0: runtime::Default::default(),
_753_index_op_expr_7654_0da3b0_initialized: runtime::Default::default(),
_call_7555_652_atr_cb2705: runtime::Default::default(),};} }

impl _State_734_supertrend_13bff4 {
  #[inline]
  fn next(&mut self) {
    self._739_upperBand_0da3b0.next();
self._740_lowerBand_0da3b0.next();
self._752_index_op_expr_7649_0da3b0.next();
self._753_index_op_expr_7654_0da3b0.next();
  }
}
    

#[doc = "supertrend(src: series<float>, factor: float, atrPeriod: int): (float, int)"]
fn _734_supertrend_13bff4(ctx: &PineCtx, state: &mut _State_734_supertrend_13bff4, _735_src_0da3b0: &PineSeries::<PineFloat>, _736_factor_433c11: PineFloat, _737_atrPeriod_7e8107: PineInt, _3_close_0da3b0: &PineSeries::<PineFloat>, _1_high_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>) -> (PineFloat, PineInt) {state.next();
let _739_upperBand_0da3b0 = &mut state._739_upperBand_0da3b0;
let _740_lowerBand_0da3b0 = &mut state._740_lowerBand_0da3b0;
let _752_index_op_expr_7649_0da3b0 = &mut state._752_index_op_expr_7649_0da3b0;
let _753_index_op_expr_7654_0da3b0 = &mut state._753_index_op_expr_7654_0da3b0;
{
{let mut _738_atr_433c11: PineFloat;
_738_atr_433c11 = <PineFloat>::from(_652_atr_cb2705(&ctx, &mut state._call_7555_652_atr_cb2705, _737_atrPeriod_7e8107, &_1_high_0da3b0, &_2_low_0da3b0, &_3_close_0da3b0));
_753_index_op_expr_7654_0da3b0.set(<PineFloat>::from(_738_atr_433c11));
_739_upperBand_0da3b0.set(<PineFloat>::from(_735_src_0da3b0.get() + _736_factor_433c11 * _738_atr_433c11));
_740_lowerBand_0da3b0.set(<PineFloat>::from(_735_src_0da3b0.get() - _736_factor_433c11 * _738_atr_433c11));
let mut _741_prevLowerBand_433c11: PineFloat;
_741_prevLowerBand_433c11 = <PineFloat>::from(_209_global_nz_46c417(&ctx, _740_lowerBand_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1)))));
let mut _742_prevUpperBand_433c11: PineFloat;
_742_prevUpperBand_433c11 = <PineFloat>::from(_209_global_nz_46c417(&ctx, _739_upperBand_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1)))));
_740_lowerBand_0da3b0.set(<PineFloat>::from({let _if_then_7610 = {_740_lowerBand_0da3b0.get()};
let _if_else_7610 = {_741_prevLowerBand_433c11};
if <bool>::from(<PineBool>::from(<PineBool>::from(<bool>::from(<PineBool>::from(_740_lowerBand_0da3b0.get() > _741_prevLowerBand_433c11)) | <bool>::from(<PineBool>::from(_3_close_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1))) < _741_prevLowerBand_433c11))))) {_if_then_7610} else {_if_else_7610}}));;
_739_upperBand_0da3b0.set(<PineFloat>::from({let _if_then_7630 = {_739_upperBand_0da3b0.get()};
let _if_else_7630 = {_742_prevUpperBand_433c11};
if <bool>::from(<PineBool>::from(<PineBool>::from(<bool>::from(<PineBool>::from(_739_upperBand_0da3b0.get() < _742_prevUpperBand_433c11)) | <bool>::from(<PineBool>::from(_3_close_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1))) > _742_prevUpperBand_433c11))))) {_if_then_7630} else {_if_else_7630}}));;
let mut _743__direction_7e8107: PineInt;
_743__direction_7e8107 = <PineInt>::from(<PineInt>::from(PineNa));
let mut _744_superTrend_433c11: PineFloat;
_744_superTrend_433c11 = <PineFloat>::from(<PineFloat>::from(PineNa));
_752_index_op_expr_7649_0da3b0.set(<PineFloat>::from(_744_superTrend_433c11));
let mut _745_prevSuperTrend_433c11: PineFloat;
_745_prevSuperTrend_433c11 = <PineFloat>::from(_752_index_op_expr_7649_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1))));
if <bool>::from(_206_global_na_39d023(&ctx, _753_index_op_expr_7654_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1))))) {{_743__direction_7e8107 = <PineInt>::from(<PineInt>::from(1));
_743__direction_7e8107}} else {if <bool>::from(<PineBool>::from(_745_prevSuperTrend_433c11 == _742_prevUpperBand_433c11)) {{_743__direction_7e8107 = <PineInt>::from({let _if_then_7673 = {-<PineInt>::from(1)};
let _if_else_7673 = {<PineInt>::from(1)};
if <bool>::from(<PineBool>::from(_3_close_0da3b0.get() > _739_upperBand_0da3b0.get())) {_if_then_7673} else {_if_else_7673}});
_743__direction_7e8107}} else {{_743__direction_7e8107 = <PineInt>::from({let _if_then_7693 = {<PineInt>::from(1)};
let _if_else_7693 = {-<PineInt>::from(1)};
if <bool>::from(<PineBool>::from(_3_close_0da3b0.get() < _740_lowerBand_0da3b0.get())) {_if_then_7693} else {_if_else_7693}});
_743__direction_7e8107}}};
_744_superTrend_433c11 = <PineFloat>::from({let _if_then_7709 = {_740_lowerBand_0da3b0.get()};
let _if_else_7709 = {_739_upperBand_0da3b0.get()};
if <bool>::from(<PineBool>::from(_743__direction_7e8107 == -<PineInt>::from(1))) {_if_then_7709} else {_if_else_7709}});
_752_index_op_expr_7649_0da3b0.set(<PineFloat>::from(_744_superTrend_433c11));;
(_744_superTrend_433c11, _743__direction_7e8107)}}}
          

struct _State_83_awesome_oscillator_c4b143 {_754_index_op_expr_755_0da3b0: PineSeries::<PineFloat>,
_754_index_op_expr_755_0da3b0_initialized: bool,
_call_741_605_sma_26e814: _State_605_sma_26e814,
_call_747_605_sma_26e814: _State_605_sma_26e814,}
impl runtime::Default for _State_83_awesome_oscillator_c4b143 { fn default() -> _State_83_awesome_oscillator_c4b143 {return _State_83_awesome_oscillator_c4b143 {_754_index_op_expr_755_0da3b0: runtime::Default::default(),
_754_index_op_expr_755_0da3b0_initialized: runtime::Default::default(),
_call_741_605_sma_26e814: runtime::Default::default(),
_call_747_605_sma_26e814: runtime::Default::default(),};} }

impl _State_83_awesome_oscillator_c4b143 {
  #[inline]
  fn next(&mut self) {
    self._754_index_op_expr_755_0da3b0.next();
  }
}
    

#[doc = "awesome_oscillator(src: series<float>, slow_length: int, fast_length: int): float"]
fn _83_awesome_oscillator_c4b143(ctx: &PineCtx, state: &mut _State_83_awesome_oscillator_c4b143, _84_src_0da3b0: &PineSeries::<PineFloat>, mut _85_slow_length_7e8107: PineInt, mut _86_fast_length_7e8107: PineInt) -> PineFloat {state.next();
let _754_index_op_expr_755_0da3b0 = &mut state._754_index_op_expr_755_0da3b0;
{if runtime::Na::na(_85_slow_length_7e8107) {_85_slow_length_7e8107 = <PineInt>::from(5)}
if runtime::Na::na(_86_fast_length_7e8107) {_86_fast_length_7e8107 = <PineInt>::from(34)}
{let mut _87_ao_433c11: PineFloat;
_87_ao_433c11 = <PineFloat>::from(_605_sma_26e814(&ctx, &mut state._call_741_605_sma_26e814, &_84_src_0da3b0, _86_fast_length_7e8107) - _605_sma_26e814(&ctx, &mut state._call_747_605_sma_26e814, &_84_src_0da3b0, _85_slow_length_7e8107));
_754_index_op_expr_755_0da3b0.set(<PineFloat>::from(_87_ao_433c11));
let mut _88_diff_433c11: PineFloat;
_88_diff_433c11 = <PineFloat>::from(_87_ao_433c11 - _754_index_op_expr_755_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1))));
_88_diff_433c11}}}
          

#[doc = "balance_of_power(): series<float>"]
fn _89_balance_of_power_c36d50(ctx: &PineCtx, _3_close_0da3b0: &PineSeries::<PineFloat>, _0_open_0da3b0: &PineSeries::<PineFloat>, _1_high_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {
{(_3_close_0da3b0.get() - _0_open_0da3b0.get()) / (_1_high_0da3b0.get() - _2_low_0da3b0.get())}}
          

struct _State_90_bollinger_bands_pct_b_cf0090 {_98_bbr_0da3b0: PineSeries::<PineFloat>,
_98_bbr_0da3b0_initialized: bool,
_call_809_605_sma_26e814: _State_605_sma_26e814,
_call_819_679_stdev_ffa58e: _State_679_stdev_ffa58e,}
impl runtime::Default for _State_90_bollinger_bands_pct_b_cf0090 { fn default() -> _State_90_bollinger_bands_pct_b_cf0090 {return _State_90_bollinger_bands_pct_b_cf0090 {_98_bbr_0da3b0: runtime::Default::default(),
_98_bbr_0da3b0_initialized: runtime::Default::default(),
_call_809_605_sma_26e814: runtime::Default::default(),
_call_819_679_stdev_ffa58e: runtime::Default::default(),};} }

impl _State_90_bollinger_bands_pct_b_cf0090 {
  #[inline]
  fn next(&mut self) {
    self._98_bbr_0da3b0.next();
  }
}
    

#[doc = "bollinger_bands_pct_b(src: series<float>, length: int, mult: float): series<float>"]
fn _90_bollinger_bands_pct_b_cf0090(ctx: &PineCtx, state: &mut _State_90_bollinger_bands_pct_b_cf0090, _91_src_0da3b0: &PineSeries::<PineFloat>, mut _92_length_7e8107: PineInt, mut _93_mult_433c11: PineFloat) -> PineFloat {state.next();
let _98_bbr_0da3b0 = &mut state._98_bbr_0da3b0;
{if runtime::Na::na(_92_length_7e8107) {_92_length_7e8107 = <PineInt>::from(20)}
if runtime::Na::na(_93_mult_433c11) {_93_mult_433c11 = <PineFloat>::from(2.0_f64)}
{let mut _94_basis_433c11: PineFloat;
_94_basis_433c11 = <PineFloat>::from(_605_sma_26e814(&ctx, &mut state._call_809_605_sma_26e814, &_91_src_0da3b0, _92_length_7e8107));
let mut _95_dev_433c11: PineFloat;
_95_dev_433c11 = <PineFloat>::from(_93_mult_433c11 * _679_stdev_ffa58e(&ctx, &mut state._call_819_679_stdev_ffa58e, &_91_src_0da3b0, _92_length_7e8107, <PineBool>::from(PineNa)));
let mut _96_upper_433c11: PineFloat;
_96_upper_433c11 = <PineFloat>::from(_94_basis_433c11 + _95_dev_433c11);
let mut _97_lower_433c11: PineFloat;
_97_lower_433c11 = <PineFloat>::from(_94_basis_433c11 - _95_dev_433c11);
_98_bbr_0da3b0.set(<PineFloat>::from((_91_src_0da3b0.get() - _97_lower_433c11) / (_96_upper_433c11 - _97_lower_433c11)));
_98_bbr_0da3b0.get()}}}
          

struct _State_679_stdev_ffa58e {_call_6901_605_sma_26e814: _State_605_sma_26e814,}
impl runtime::Default for _State_679_stdev_ffa58e { fn default() -> _State_679_stdev_ffa58e {return _State_679_stdev_ffa58e {_call_6901_605_sma_26e814: runtime::Default::default(),};} }

impl _State_679_stdev_ffa58e {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "stdev(src: series<float>, length: int, biased: bool): float"]
fn _679_stdev_ffa58e(ctx: &PineCtx, state: &mut _State_679_stdev_ffa58e, _680_src_0da3b0: &PineSeries::<PineFloat>, _681_length_7e8107: PineInt, mut _682_biased_8e45b4: PineBool) -> PineFloat {state.next();

{if runtime::Na::na(_682_biased_8e45b4) {_682_biased_8e45b4 = <PineBool>::from(true)}
{let mut _683_avg_433c11: PineFloat;
_683_avg_433c11 = <PineFloat>::from(_605_sma_26e814(&ctx, &mut state._call_6901_605_sma_26e814, &_680_src_0da3b0, _681_length_7e8107));
let mut _684_sumOfSquareDeviations_433c11: PineFloat;
_684_sumOfSquareDeviations_433c11 = <PineFloat>::from(<PineFloat>::from(0.0_f64));
{let mut _685_i_7e8107: PineInt;
_685_i_7e8107 = <PineInt>::from(<PineInt>::from(0));
while <bool>::from(<PineBool>::from(_685_i_7e8107 <= _681_length_7e8107 - <PineInt>::from(1))) {{let mut _686_sum_433c11: PineFloat;
_686_sum_433c11 = <PineFloat>::from(_674_stdev_sum_65df12(&ctx, _680_src_0da3b0.get_at_offset(<usize>::from(_685_i_7e8107)), -_683_avg_433c11));
_684_sumOfSquareDeviations_433c11 = <PineFloat>::from(_684_sumOfSquareDeviations_433c11 + _686_sum_433c11 * _686_sum_433c11);}
{_685_i_7e8107 = <PineInt>::from(_685_i_7e8107 + 1.into());
_685_i_7e8107};}}
if <bool>::from(_682_biased_8e45b4) {{_251_math_sqrt_1fecea(&ctx, _684_sumOfSquareDeviations_433c11 / <PineFloat>::from(_681_length_7e8107))}} else {{_251_math_sqrt_1fecea(&ctx, _684_sumOfSquareDeviations_433c11 / <PineFloat>::from((_681_length_7e8107 - <PineInt>::from(1))))}}}}}
          

#[doc = "stdev_sum(fst: float, snd: float): float"]
fn _674_stdev_sum_65df12(ctx: &PineCtx, _675_fst_433c11: PineFloat, _676_snd_433c11: PineFloat) -> PineFloat {
{let mut _677_EPS_433c11: PineFloat;
_677_EPS_433c11 = <PineFloat>::from(<PineFloat>::from(1e-10_f64));
let mut _678_res_433c11: PineFloat;
_678_res_433c11 = <PineFloat>::from(_675_fst_433c11 + _676_snd_433c11);
if <bool>::from(_671_stdev_is_zero_cf26e2(&ctx, _678_res_433c11, _677_EPS_433c11)) {{_678_res_433c11 = <PineFloat>::from(<PineInt>::from(0));;
_678_res_433c11}} else {{if <bool>::from(<PineBool>::from(!_671_stdev_is_zero_cf26e2(&ctx, _678_res_433c11, <PineFloat>::from(1e-4_f64)))) {{_678_res_433c11 = <PineFloat>::from(_678_res_433c11);;
_678_res_433c11}} else {<PineFloat>::from({<PineInt>::from(15)})}}}}}
          

#[doc = "stdev_is_zero(val: float, eps: float): bool"]
fn _671_stdev_is_zero_cf26e2(ctx: &PineCtx, _672_val_433c11: PineFloat, _673_eps_433c11: PineFloat) -> PineBool {
{<PineBool>::from(_249_math_abs_b87bee(&ctx, _672_val_433c11) <= _673_eps_433c11)}}
          

struct _State_99_bollinger_bands_width_935a52 {_call_882_605_sma_26e814: _State_605_sma_26e814,
_call_892_679_stdev_ffa58e: _State_679_stdev_ffa58e,}
impl runtime::Default for _State_99_bollinger_bands_width_935a52 { fn default() -> _State_99_bollinger_bands_width_935a52 {return _State_99_bollinger_bands_width_935a52 {_call_882_605_sma_26e814: runtime::Default::default(),
_call_892_679_stdev_ffa58e: runtime::Default::default(),};} }

impl _State_99_bollinger_bands_width_935a52 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "bollinger_bands_width(src: series<float>, length: int, mult: float): float"]
fn _99_bollinger_bands_width_935a52(ctx: &PineCtx, state: &mut _State_99_bollinger_bands_width_935a52, _100_src_0da3b0: &PineSeries::<PineFloat>, mut _101_length_7e8107: PineInt, mut _102_mult_433c11: PineFloat) -> PineFloat {state.next();

{if runtime::Na::na(_101_length_7e8107) {_101_length_7e8107 = <PineInt>::from(20)}
if runtime::Na::na(_102_mult_433c11) {_102_mult_433c11 = <PineFloat>::from(2.0_f64)}
{let mut _103_basis_433c11: PineFloat;
_103_basis_433c11 = <PineFloat>::from(_605_sma_26e814(&ctx, &mut state._call_882_605_sma_26e814, &_100_src_0da3b0, _101_length_7e8107));
let mut _104_dev_433c11: PineFloat;
_104_dev_433c11 = <PineFloat>::from(_102_mult_433c11 * _679_stdev_ffa58e(&ctx, &mut state._call_892_679_stdev_ffa58e, &_100_src_0da3b0, _101_length_7e8107, <PineBool>::from(PineNa)));
let mut _105_upper_433c11: PineFloat;
_105_upper_433c11 = <PineFloat>::from(_103_basis_433c11 + _104_dev_433c11);
let mut _106_lower_433c11: PineFloat;
_106_lower_433c11 = <PineFloat>::from(_103_basis_433c11 - _104_dev_433c11);
let mut _107_bbw_433c11: PineFloat;
_107_bbw_433c11 = <PineFloat>::from(((_105_upper_433c11 - _106_lower_433c11) / _103_basis_433c11) * <PineFloat>::from(<PineInt>::from(100)));
_107_bbw_433c11}}}
          

struct _State_108_bollinger_bands_e0db10 {_call_953_605_sma_26e814: _State_605_sma_26e814,
_call_963_679_stdev_ffa58e: _State_679_stdev_ffa58e,}
impl runtime::Default for _State_108_bollinger_bands_e0db10 { fn default() -> _State_108_bollinger_bands_e0db10 {return _State_108_bollinger_bands_e0db10 {_call_953_605_sma_26e814: runtime::Default::default(),
_call_963_679_stdev_ffa58e: runtime::Default::default(),};} }

impl _State_108_bollinger_bands_e0db10 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "bollinger_bands(src: series<float>, length: int, mult: float): (float, float)"]
fn _108_bollinger_bands_e0db10(ctx: &PineCtx, state: &mut _State_108_bollinger_bands_e0db10, _109_src_0da3b0: &PineSeries::<PineFloat>, mut _110_length_7e8107: PineInt, mut _111_mult_433c11: PineFloat) -> (PineFloat, PineFloat) {state.next();

{if runtime::Na::na(_110_length_7e8107) {_110_length_7e8107 = <PineInt>::from(20)}
if runtime::Na::na(_111_mult_433c11) {_111_mult_433c11 = <PineFloat>::from(2.0_f64)}
{let mut _112_basis_433c11: PineFloat;
_112_basis_433c11 = <PineFloat>::from(_605_sma_26e814(&ctx, &mut state._call_953_605_sma_26e814, &_109_src_0da3b0, _110_length_7e8107));
let mut _113_dev_433c11: PineFloat;
_113_dev_433c11 = <PineFloat>::from(_111_mult_433c11 * _679_stdev_ffa58e(&ctx, &mut state._call_963_679_stdev_ffa58e, &_109_src_0da3b0, _110_length_7e8107, <PineBool>::from(PineNa)));
let mut _114_upper_433c11: PineFloat;
_114_upper_433c11 = <PineFloat>::from(_112_basis_433c11 + _113_dev_433c11);
let mut _115_lower_433c11: PineFloat;
_115_lower_433c11 = <PineFloat>::from(_112_basis_433c11 - _113_dev_433c11);
(_114_upper_433c11, _115_lower_433c11)}}}
          

struct _State_116_chaikin_money_flow_93bd54 {_118_cumVol_433c11: PineFloat,
_118_cumVol_433c11_initialized: bool,
_755_series_expr_1042_src_0da3b0: PineSeries::<PineFloat>,
_755_series_expr_1042_src_0da3b0_initialized: bool,
_call_1044_261_math_sum_b4673a: _State_261_math_sum_b4673a,
_call_1050_261_math_sum_b4673a: _State_261_math_sum_b4673a,}
impl runtime::Default for _State_116_chaikin_money_flow_93bd54 { fn default() -> _State_116_chaikin_money_flow_93bd54 {return _State_116_chaikin_money_flow_93bd54 {_118_cumVol_433c11: runtime::Default::default(),
_118_cumVol_433c11_initialized: runtime::Default::default(),
_755_series_expr_1042_src_0da3b0: runtime::Default::default(),
_755_series_expr_1042_src_0da3b0_initialized: runtime::Default::default(),
_call_1044_261_math_sum_b4673a: runtime::Default::default(),
_call_1050_261_math_sum_b4673a: runtime::Default::default(),};} }

impl _State_116_chaikin_money_flow_93bd54 {
  #[inline]
  fn next(&mut self) {
    
self._755_series_expr_1042_src_0da3b0.next();
  }
}
    

#[doc = "chaikin_money_flow(length: int): float"]
fn _116_chaikin_money_flow_93bd54(ctx: &PineCtx, state: &mut _State_116_chaikin_money_flow_93bd54, mut _117_length_7e8107: PineInt, _4_volume_0da3b0: &PineSeries::<PineFloat>, _3_close_0da3b0: &PineSeries::<PineFloat>, _1_high_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {state.next();
let _118_cumVol_433c11 = &mut state._118_cumVol_433c11;
let _755_series_expr_1042_src_0da3b0 = &mut state._755_series_expr_1042_src_0da3b0;
{if runtime::Na::na(_117_length_7e8107) {_117_length_7e8107 = <PineInt>::from(20)}
{
if !state._118_cumVol_433c11_initialized {
  *_118_cumVol_433c11 = <PineFloat>::from(<PineFloat>::from(0.0_f64));
  state._118_cumVol_433c11_initialized = true;
}
    
*_118_cumVol_433c11 = <PineFloat>::from((_209_global_nz_46c417(&ctx, _4_volume_0da3b0.get())) + (*_118_cumVol_433c11));;
let mut _119_ad_433c11: PineFloat;
_119_ad_433c11 = <PineFloat>::from({let _if_then_1035 = {<PineFloat>::from(<PineInt>::from(0))};
let _if_else_1035 = {((<PineFloat>::from(<PineInt>::from(2)) * _3_close_0da3b0.get() - _2_low_0da3b0.get() - _1_high_0da3b0.get()) / (_1_high_0da3b0.get() - _2_low_0da3b0.get())) * _4_volume_0da3b0.get()};
if <bool>::from(<PineBool>::from(<PineBool>::from(<bool>::from(<PineBool>::from(<PineBool>::from(<bool>::from(<PineBool>::from(_3_close_0da3b0.get() == _1_high_0da3b0.get())) & <bool>::from(<PineBool>::from(_3_close_0da3b0.get() == _2_low_0da3b0.get()))))) | <bool>::from(<PineBool>::from(_1_high_0da3b0.get() == _2_low_0da3b0.get()))))) {_if_then_1035} else {_if_else_1035}});
let mut _120_mf_433c11: PineFloat;
_120_mf_433c11 = <PineFloat>::from(_261_math_sum_b4673a(&ctx, &mut state._call_1044_261_math_sum_b4673a, {{
_755_series_expr_1042_src_0da3b0.set(<PineFloat>::from(_119_ad_433c11));}
&_755_series_expr_1042_src_0da3b0}, _117_length_7e8107) / _261_math_sum_b4673a(&ctx, &mut state._call_1050_261_math_sum_b4673a, &_4_volume_0da3b0, _117_length_7e8107));
_120_mf_433c11}}}
          

struct _State_121_chande_kroll_stop_b9c264 {_758_series_expr_1131_src_0da3b0: PineSeries::<PineFloat>,
_758_series_expr_1131_src_0da3b0_initialized: bool,
_759_series_expr_1140_src_0da3b0: PineSeries::<PineFloat>,
_759_series_expr_1140_src_0da3b0_initialized: bool,
_call_1099_591_highest_ec8c34: _State_591_highest_ec8c34,
_call_1105_652_atr_cb2705: _State_652_atr_cb2705,
_call_1116_595_lowest_ffa876: _State_595_lowest_ffa876,
_call_1122_652_atr_cb2705: _State_652_atr_cb2705,
_call_1133_591_highest_ec8c34: _State_591_highest_ec8c34,
_call_1142_595_lowest_ffa876: _State_595_lowest_ffa876,}
impl runtime::Default for _State_121_chande_kroll_stop_b9c264 { fn default() -> _State_121_chande_kroll_stop_b9c264 {return _State_121_chande_kroll_stop_b9c264 {_758_series_expr_1131_src_0da3b0: runtime::Default::default(),
_758_series_expr_1131_src_0da3b0_initialized: runtime::Default::default(),
_759_series_expr_1140_src_0da3b0: runtime::Default::default(),
_759_series_expr_1140_src_0da3b0_initialized: runtime::Default::default(),
_call_1099_591_highest_ec8c34: runtime::Default::default(),
_call_1105_652_atr_cb2705: runtime::Default::default(),
_call_1116_595_lowest_ffa876: runtime::Default::default(),
_call_1122_652_atr_cb2705: runtime::Default::default(),
_call_1133_591_highest_ec8c34: runtime::Default::default(),
_call_1142_595_lowest_ffa876: runtime::Default::default(),};} }

impl _State_121_chande_kroll_stop_b9c264 {
  #[inline]
  fn next(&mut self) {
    self._758_series_expr_1131_src_0da3b0.next();
self._759_series_expr_1140_src_0da3b0.next();
  }
}
    

#[doc = "chande_kroll_stop(atr_length: int, atr_coeff: float, stop_length: int): (float, float)"]
fn _121_chande_kroll_stop_b9c264(ctx: &PineCtx, state: &mut _State_121_chande_kroll_stop_b9c264, mut _122_atr_length_7e8107: PineInt, mut _123_atr_coeff_433c11: PineFloat, mut _124_stop_length_7e8107: PineInt, _1_high_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>, _3_close_0da3b0: &PineSeries::<PineFloat>) -> (PineFloat, PineFloat) {state.next();
let _758_series_expr_1131_src_0da3b0 = &mut state._758_series_expr_1131_src_0da3b0;
let _759_series_expr_1140_src_0da3b0 = &mut state._759_series_expr_1140_src_0da3b0;
{if runtime::Na::na(_122_atr_length_7e8107) {_122_atr_length_7e8107 = <PineInt>::from(10)}
if runtime::Na::na(_123_atr_coeff_433c11) {_123_atr_coeff_433c11 = <PineFloat>::from(1.0_f64)}
if runtime::Na::na(_124_stop_length_7e8107) {_124_stop_length_7e8107 = <PineInt>::from(9)}
{let mut _125_p_7e8107: PineInt;
_125_p_7e8107 = <PineInt>::from(_122_atr_length_7e8107);
let mut _126_x_433c11: PineFloat;
_126_x_433c11 = <PineFloat>::from(_123_atr_coeff_433c11);
let mut _127_q_7e8107: PineInt;
_127_q_7e8107 = <PineInt>::from(_124_stop_length_7e8107);
let mut _128_first_high_stop_433c11: PineFloat;
_128_first_high_stop_433c11 = <PineFloat>::from(_591_highest_ec8c34(&ctx, &mut state._call_1099_591_highest_ec8c34, &_1_high_0da3b0, _125_p_7e8107) - _126_x_433c11 * _652_atr_cb2705(&ctx, &mut state._call_1105_652_atr_cb2705, _125_p_7e8107, &_1_high_0da3b0, &_2_low_0da3b0, &_3_close_0da3b0));
let mut _129_first_low_stop_433c11: PineFloat;
_129_first_low_stop_433c11 = <PineFloat>::from(_595_lowest_ffa876(&ctx, &mut state._call_1116_595_lowest_ffa876, &_2_low_0da3b0, _125_p_7e8107) + _126_x_433c11 * _652_atr_cb2705(&ctx, &mut state._call_1122_652_atr_cb2705, _125_p_7e8107, &_1_high_0da3b0, &_2_low_0da3b0, &_3_close_0da3b0));
let mut _130_stop_short_433c11: PineFloat;
_130_stop_short_433c11 = <PineFloat>::from(_591_highest_ec8c34(&ctx, &mut state._call_1133_591_highest_ec8c34, {{
_758_series_expr_1131_src_0da3b0.set(<PineFloat>::from(_128_first_high_stop_433c11));}
&_758_series_expr_1131_src_0da3b0}, _127_q_7e8107));
let mut _131_stop_long_433c11: PineFloat;
_131_stop_long_433c11 = <PineFloat>::from(_595_lowest_ffa876(&ctx, &mut state._call_1142_595_lowest_ffa876, {{
_759_series_expr_1140_src_0da3b0.set(<PineFloat>::from(_129_first_low_stop_433c11));}
&_759_series_expr_1140_src_0da3b0}, _127_q_7e8107));
(_130_stop_short_433c11, _131_stop_long_433c11)}}}
          

struct _State_132_choppiness_index_b9a78e {_760_series_expr_1171_src_0da3b0: PineSeries::<PineFloat>,
_760_series_expr_1171_src_0da3b0_initialized: bool,
_call_1173_261_math_sum_b4673a: _State_261_math_sum_b4673a,
_call_1171_652_atr_cb2705: _State_652_atr_cb2705,
_call_1178_599_highest_4a6663: _State_599_highest_4a6663,
_call_1183_601_lowest_66a99a: _State_601_lowest_66a99a,}
impl runtime::Default for _State_132_choppiness_index_b9a78e { fn default() -> _State_132_choppiness_index_b9a78e {return _State_132_choppiness_index_b9a78e {_760_series_expr_1171_src_0da3b0: runtime::Default::default(),
_760_series_expr_1171_src_0da3b0_initialized: runtime::Default::default(),
_call_1173_261_math_sum_b4673a: runtime::Default::default(),
_call_1171_652_atr_cb2705: runtime::Default::default(),
_call_1178_599_highest_4a6663: runtime::Default::default(),
_call_1183_601_lowest_66a99a: runtime::Default::default(),};} }

impl _State_132_choppiness_index_b9a78e {
  #[inline]
  fn next(&mut self) {
    self._760_series_expr_1171_src_0da3b0.next();
  }
}
    

#[doc = "choppiness_index(length: int): float"]
fn _132_choppiness_index_b9a78e(ctx: &PineCtx, state: &mut _State_132_choppiness_index_b9a78e, mut _133_length_7e8107: PineInt, _1_high_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>, _3_close_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {state.next();
let _760_series_expr_1171_src_0da3b0 = &mut state._760_series_expr_1171_src_0da3b0;
{if runtime::Na::na(_133_length_7e8107) {_133_length_7e8107 = <PineInt>::from(14)}
{<PineFloat>::from(<PineInt>::from(100)) * _271_math_log10_d62fdd(&ctx, _261_math_sum_b4673a(&ctx, &mut state._call_1173_261_math_sum_b4673a, {{
_760_series_expr_1171_src_0da3b0.set(<PineFloat>::from(_652_atr_cb2705(&ctx, &mut state._call_1171_652_atr_cb2705, <PineInt>::from(1), &_1_high_0da3b0, &_2_low_0da3b0, &_3_close_0da3b0)));}
&_760_series_expr_1171_src_0da3b0}, _133_length_7e8107) / (_599_highest_4a6663(&ctx, &mut state._call_1178_599_highest_4a6663, _133_length_7e8107, &_1_high_0da3b0) - _601_lowest_66a99a(&ctx, &mut state._call_1183_601_lowest_66a99a, _133_length_7e8107, &_2_low_0da3b0))) / _271_math_log10_d62fdd(&ctx, <PineFloat>::from(_133_length_7e8107))}}}
          

#[doc = "math_log10(x: float): float"]
fn _271_math_log10_d62fdd(ctx: &PineCtx, _272_x_433c11: PineFloat) -> PineFloat {return (f64::log10((_272_x_433c11).into())).into();}
          

struct _State_599_highest_4a6663 {_call_5950_591_highest_ec8c34: _State_591_highest_ec8c34,}
impl runtime::Default for _State_599_highest_4a6663 { fn default() -> _State_599_highest_4a6663 {return _State_599_highest_4a6663 {_call_5950_591_highest_ec8c34: runtime::Default::default(),};} }

impl _State_599_highest_4a6663 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "highest(length: int): float"]
fn _599_highest_4a6663(ctx: &PineCtx, state: &mut _State_599_highest_4a6663, _600_length_7e8107: PineInt, _1_high_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {state.next();

{
{_591_highest_ec8c34(&ctx, &mut state._call_5950_591_highest_ec8c34, &_1_high_0da3b0, _600_length_7e8107)}}}
          

struct _State_601_lowest_66a99a {_call_5972_595_lowest_ffa876: _State_595_lowest_ffa876,}
impl runtime::Default for _State_601_lowest_66a99a { fn default() -> _State_601_lowest_66a99a {return _State_601_lowest_66a99a {_call_5972_595_lowest_ffa876: runtime::Default::default(),};} }

impl _State_601_lowest_66a99a {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "lowest(length: int): float"]
fn _601_lowest_66a99a(ctx: &PineCtx, state: &mut _State_601_lowest_66a99a, _602_length_7e8107: PineInt, _2_low_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {state.next();

{
{_595_lowest_ffa876(&ctx, &mut state._call_5972_595_lowest_ffa876, &_2_low_0da3b0, _602_length_7e8107)}}}
          

struct _State_134_coppock_curve_e71b71 {_762_series_expr_1245_src_0da3b0: PineSeries::<PineFloat>,
_762_series_expr_1245_src_0da3b0_initialized: bool,}
impl runtime::Default for _State_134_coppock_curve_e71b71 { fn default() -> _State_134_coppock_curve_e71b71 {return _State_134_coppock_curve_e71b71 {_762_series_expr_1245_src_0da3b0: runtime::Default::default(),
_762_series_expr_1245_src_0da3b0_initialized: runtime::Default::default(),};} }

impl _State_134_coppock_curve_e71b71 {
  #[inline]
  fn next(&mut self) {
    self._762_series_expr_1245_src_0da3b0.next();
  }
}
    

#[doc = "coppock_curve(src: series<float>, wma_length: int, long_roc_length: int, short_roc_length: int): float"]
fn _134_coppock_curve_e71b71(ctx: &PineCtx, state: &mut _State_134_coppock_curve_e71b71, _135_src_0da3b0: &PineSeries::<PineFloat>, mut _136_wma_length_7e8107: PineInt, mut _137_long_roc_length_7e8107: PineInt, mut _138_short_roc_length_7e8107: PineInt) -> PineFloat {state.next();
let _762_series_expr_1245_src_0da3b0 = &mut state._762_series_expr_1245_src_0da3b0;
{if runtime::Na::na(_136_wma_length_7e8107) {_136_wma_length_7e8107 = <PineInt>::from(10)}
if runtime::Na::na(_137_long_roc_length_7e8107) {_137_long_roc_length_7e8107 = <PineInt>::from(14)}
if runtime::Na::na(_138_short_roc_length_7e8107) {_138_short_roc_length_7e8107 = <PineInt>::from(11)}
{_619_wma_350788(&ctx, {{
_762_series_expr_1245_src_0da3b0.set(<PineFloat>::from(_559_roc_27f889(&ctx, &_135_src_0da3b0, _137_long_roc_length_7e8107) + _559_roc_27f889(&ctx, &_135_src_0da3b0, _138_short_roc_length_7e8107)));}
&_762_series_expr_1245_src_0da3b0}, _136_wma_length_7e8107)}}}
          

struct _State_139_donchian_channel_a4ae4b {_call_1272_601_lowest_66a99a: _State_601_lowest_66a99a,
_call_1280_599_highest_4a6663: _State_599_highest_4a6663,}
impl runtime::Default for _State_139_donchian_channel_a4ae4b { fn default() -> _State_139_donchian_channel_a4ae4b {return _State_139_donchian_channel_a4ae4b {_call_1272_601_lowest_66a99a: runtime::Default::default(),
_call_1280_599_highest_4a6663: runtime::Default::default(),};} }

impl _State_139_donchian_channel_a4ae4b {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "donchian_channel(src: series<float>, length: int): (float, float, float)"]
fn _139_donchian_channel_a4ae4b(ctx: &PineCtx, state: &mut _State_139_donchian_channel_a4ae4b, _140_src_0da3b0: &PineSeries::<PineFloat>, mut _141_length_7e8107: PineInt, _2_low_0da3b0: &PineSeries::<PineFloat>, _1_high_0da3b0: &PineSeries::<PineFloat>) -> (PineFloat, PineFloat, PineFloat) {state.next();

{if runtime::Na::na(_141_length_7e8107) {_141_length_7e8107 = <PineInt>::from(20)}
{let mut _142_lower_433c11: PineFloat;
_142_lower_433c11 = <PineFloat>::from(_601_lowest_66a99a(&ctx, &mut state._call_1272_601_lowest_66a99a, _141_length_7e8107, &_2_low_0da3b0));
let mut _143_upper_433c11: PineFloat;
_143_upper_433c11 = <PineFloat>::from(_599_highest_4a6663(&ctx, &mut state._call_1280_599_highest_4a6663, _141_length_7e8107, &_1_high_0da3b0));
let mut _144_basis_433c11: PineFloat;
_144_basis_433c11 = <PineFloat>::from(_276_math_avg_4246ad(&ctx, _143_upper_433c11, _142_lower_433c11));
(_143_upper_433c11, _142_lower_433c11, _144_basis_433c11)}}}
          

#[doc = "math_avg(a: float, b: float): float"]
fn _276_math_avg_4246ad(ctx: &PineCtx, _277_a_433c11: PineFloat, _278_b_433c11: PineFloat) -> PineFloat {
{(_277_a_433c11 + _278_b_433c11) / <PineFloat>::from(2.0_f64)}}
          

struct _State_145_macd_464af1 {_call_1329_609_ema_23b3fd: _State_609_ema_23b3fd,
_call_1335_609_ema_23b3fd: _State_609_ema_23b3fd,}
impl runtime::Default for _State_145_macd_464af1 { fn default() -> _State_145_macd_464af1 {return _State_145_macd_464af1 {_call_1329_609_ema_23b3fd: runtime::Default::default(),
_call_1335_609_ema_23b3fd: runtime::Default::default(),};} }

impl _State_145_macd_464af1 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "macd(src: series<float>, short_length: int, long_length: int): float"]
fn _145_macd_464af1(ctx: &PineCtx, state: &mut _State_145_macd_464af1, _146_src_0da3b0: &PineSeries::<PineFloat>, mut _147_short_length_7e8107: PineInt, mut _148_long_length_7e8107: PineInt) -> PineFloat {state.next();

{if runtime::Na::na(_147_short_length_7e8107) {_147_short_length_7e8107 = <PineInt>::from(12)}
if runtime::Na::na(_148_long_length_7e8107) {_148_long_length_7e8107 = <PineInt>::from(26)}
{let mut _149_macd_433c11: PineFloat;
_149_macd_433c11 = <PineFloat>::from(_609_ema_23b3fd(&ctx, &mut state._call_1329_609_ema_23b3fd, &_146_src_0da3b0, _147_short_length_7e8107, <PineFloat>::from(PineNa)) - _609_ema_23b3fd(&ctx, &mut state._call_1335_609_ema_23b3fd, &_146_src_0da3b0, _148_long_length_7e8107, <PineFloat>::from(PineNa)));
_149_macd_433c11}}}
          

struct _State_150_price_oscillator_19a52e {_call_1374_609_ema_23b3fd: _State_609_ema_23b3fd,
_call_1383_609_ema_23b3fd: _State_609_ema_23b3fd,}
impl runtime::Default for _State_150_price_oscillator_19a52e { fn default() -> _State_150_price_oscillator_19a52e {return _State_150_price_oscillator_19a52e {_call_1374_609_ema_23b3fd: runtime::Default::default(),
_call_1383_609_ema_23b3fd: runtime::Default::default(),};} }

impl _State_150_price_oscillator_19a52e {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "price_oscillator(src: series<float>, short_length: int, long_length: int): float"]
fn _150_price_oscillator_19a52e(ctx: &PineCtx, state: &mut _State_150_price_oscillator_19a52e, _151_src_0da3b0: &PineSeries::<PineFloat>, mut _152_short_length_7e8107: PineInt, mut _153_long_length_7e8107: PineInt) -> PineFloat {state.next();

{if runtime::Na::na(_152_short_length_7e8107) {_152_short_length_7e8107 = <PineInt>::from(12)}
if runtime::Na::na(_153_long_length_7e8107) {_153_long_length_7e8107 = <PineInt>::from(26)}
{let mut _154_short_433c11: PineFloat;
_154_short_433c11 = <PineFloat>::from(_609_ema_23b3fd(&ctx, &mut state._call_1374_609_ema_23b3fd, &_151_src_0da3b0, _152_short_length_7e8107, <PineFloat>::from(PineNa)));
let mut _155_long_433c11: PineFloat;
_155_long_433c11 = <PineFloat>::from(_609_ema_23b3fd(&ctx, &mut state._call_1383_609_ema_23b3fd, &_151_src_0da3b0, _153_long_length_7e8107, <PineFloat>::from(PineNa)));
let mut _156_po_433c11: PineFloat;
_156_po_433c11 = <PineFloat>::from((_154_short_433c11 - _155_long_433c11) / _155_long_433c11 * <PineFloat>::from(<PineInt>::from(100)));
_156_po_433c11}}}
          

struct _State_157_relative_vigor_index_9b77cb {_763_series_expr_1421_src_0da3b0: PineSeries::<PineFloat>,
_763_series_expr_1421_src_0da3b0_initialized: bool,
_764_series_expr_1420_src_0da3b0: PineSeries::<PineFloat>,
_764_series_expr_1420_src_0da3b0_initialized: bool,
_765_series_expr_1433_src_0da3b0: PineSeries::<PineFloat>,
_765_series_expr_1433_src_0da3b0_initialized: bool,
_766_series_expr_1432_src_0da3b0: PineSeries::<PineFloat>,
_766_series_expr_1432_src_0da3b0_initialized: bool,
_call_1423_261_math_sum_b4673a: _State_261_math_sum_b4673a,
_call_1435_261_math_sum_b4673a: _State_261_math_sum_b4673a,}
impl runtime::Default for _State_157_relative_vigor_index_9b77cb { fn default() -> _State_157_relative_vigor_index_9b77cb {return _State_157_relative_vigor_index_9b77cb {_763_series_expr_1421_src_0da3b0: runtime::Default::default(),
_763_series_expr_1421_src_0da3b0_initialized: runtime::Default::default(),
_764_series_expr_1420_src_0da3b0: runtime::Default::default(),
_764_series_expr_1420_src_0da3b0_initialized: runtime::Default::default(),
_765_series_expr_1433_src_0da3b0: runtime::Default::default(),
_765_series_expr_1433_src_0da3b0_initialized: runtime::Default::default(),
_766_series_expr_1432_src_0da3b0: runtime::Default::default(),
_766_series_expr_1432_src_0da3b0_initialized: runtime::Default::default(),
_call_1423_261_math_sum_b4673a: runtime::Default::default(),
_call_1435_261_math_sum_b4673a: runtime::Default::default(),};} }

impl _State_157_relative_vigor_index_9b77cb {
  #[inline]
  fn next(&mut self) {
    self._763_series_expr_1421_src_0da3b0.next();
self._764_series_expr_1420_src_0da3b0.next();
self._765_series_expr_1433_src_0da3b0.next();
self._766_series_expr_1432_src_0da3b0.next();
  }
}
    

#[doc = "relative_vigor_index(length: int): float"]
fn _157_relative_vigor_index_9b77cb(ctx: &PineCtx, state: &mut _State_157_relative_vigor_index_9b77cb, mut _158_length_7e8107: PineInt, _3_close_0da3b0: &PineSeries::<PineFloat>, _0_open_0da3b0: &PineSeries::<PineFloat>, _1_high_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {state.next();
let _763_series_expr_1421_src_0da3b0 = &mut state._763_series_expr_1421_src_0da3b0;
let _764_series_expr_1420_src_0da3b0 = &mut state._764_series_expr_1420_src_0da3b0;
let _765_series_expr_1433_src_0da3b0 = &mut state._765_series_expr_1433_src_0da3b0;
let _766_series_expr_1432_src_0da3b0 = &mut state._766_series_expr_1432_src_0da3b0;
{if runtime::Na::na(_158_length_7e8107) {_158_length_7e8107 = <PineInt>::from(14)}
{_261_math_sum_b4673a(&ctx, &mut state._call_1423_261_math_sum_b4673a, {{
_763_series_expr_1421_src_0da3b0.set(<PineFloat>::from(_603_swma_9f9813(&ctx, {{
_764_series_expr_1420_src_0da3b0.set(<PineFloat>::from(_3_close_0da3b0.get() - _0_open_0da3b0.get()));}
&_764_series_expr_1420_src_0da3b0})));}
&_763_series_expr_1421_src_0da3b0}, _158_length_7e8107) / _261_math_sum_b4673a(&ctx, &mut state._call_1435_261_math_sum_b4673a, {{
_765_series_expr_1433_src_0da3b0.set(<PineFloat>::from(_603_swma_9f9813(&ctx, {{
_766_series_expr_1432_src_0da3b0.set(<PineFloat>::from(_1_high_0da3b0.get() - _2_low_0da3b0.get()));}
&_766_series_expr_1432_src_0da3b0})));}
&_765_series_expr_1433_src_0da3b0}, _158_length_7e8107)}}}
          

struct _State_159_relative_volatility_index_6e8c65 {_767_series_expr_1480_src_0da3b0: PineSeries::<PineFloat>,
_767_series_expr_1480_src_0da3b0_initialized: bool,
_768_series_expr_1498_src_0da3b0: PineSeries::<PineFloat>,
_768_series_expr_1498_src_0da3b0_initialized: bool,
_call_1464_679_stdev_ffa58e: _State_679_stdev_ffa58e,
_call_1482_609_ema_23b3fd: _State_609_ema_23b3fd,
_call_1500_609_ema_23b3fd: _State_609_ema_23b3fd,}
impl runtime::Default for _State_159_relative_volatility_index_6e8c65 { fn default() -> _State_159_relative_volatility_index_6e8c65 {return _State_159_relative_volatility_index_6e8c65 {_767_series_expr_1480_src_0da3b0: runtime::Default::default(),
_767_series_expr_1480_src_0da3b0_initialized: runtime::Default::default(),
_768_series_expr_1498_src_0da3b0: runtime::Default::default(),
_768_series_expr_1498_src_0da3b0_initialized: runtime::Default::default(),
_call_1464_679_stdev_ffa58e: runtime::Default::default(),
_call_1482_609_ema_23b3fd: runtime::Default::default(),
_call_1500_609_ema_23b3fd: runtime::Default::default(),};} }

impl _State_159_relative_volatility_index_6e8c65 {
  #[inline]
  fn next(&mut self) {
    self._767_series_expr_1480_src_0da3b0.next();
self._768_series_expr_1498_src_0da3b0.next();
  }
}
    

#[doc = "relative_volatility_index(src: series<float>, length: int): float"]
fn _159_relative_volatility_index_6e8c65(ctx: &PineCtx, state: &mut _State_159_relative_volatility_index_6e8c65, _160_src_0da3b0: &PineSeries::<PineFloat>, mut _161_length_7e8107: PineInt) -> PineFloat {state.next();
let _767_series_expr_1480_src_0da3b0 = &mut state._767_series_expr_1480_src_0da3b0;
let _768_series_expr_1498_src_0da3b0 = &mut state._768_series_expr_1498_src_0da3b0;
{if runtime::Na::na(_161_length_7e8107) {_161_length_7e8107 = <PineInt>::from(14)}
{let mut _162_stddev_433c11: PineFloat;
_162_stddev_433c11 = <PineFloat>::from(_679_stdev_ffa58e(&ctx, &mut state._call_1464_679_stdev_ffa58e, &_160_src_0da3b0, _161_length_7e8107, <PineBool>::from(PineNa)));
let mut _163_upper_433c11: PineFloat;
_163_upper_433c11 = <PineFloat>::from(_609_ema_23b3fd(&ctx, &mut state._call_1482_609_ema_23b3fd, {{
_767_series_expr_1480_src_0da3b0.set(<PineFloat>::from({let _if_then_1480 = {<PineFloat>::from(<PineInt>::from(0))};
let _if_else_1480 = {_162_stddev_433c11};
if <bool>::from(<PineBool>::from(_554_change_661c05(&ctx, &_160_src_0da3b0) <= <PineFloat>::from(<PineInt>::from(0)))) {_if_then_1480} else {_if_else_1480}}));}
&_767_series_expr_1480_src_0da3b0}, _161_length_7e8107, <PineFloat>::from(PineNa)));
let mut _164_lower_433c11: PineFloat;
_164_lower_433c11 = <PineFloat>::from(_609_ema_23b3fd(&ctx, &mut state._call_1500_609_ema_23b3fd, {{
_768_series_expr_1498_src_0da3b0.set(<PineFloat>::from({let _if_then_1498 = {<PineFloat>::from(<PineInt>::from(0))};
let _if_else_1498 = {_162_stddev_433c11};
if <bool>::from(<PineBool>::from(_554_change_661c05(&ctx, &_160_src_0da3b0) > <PineFloat>::from(<PineInt>::from(0)))) {_if_then_1498} else {_if_else_1498}}));}
&_768_series_expr_1498_src_0da3b0}, _161_length_7e8107, <PineFloat>::from(PineNa)));
let mut _165_rvi_433c11: PineFloat;
_165_rvi_433c11 = <PineFloat>::from(_163_upper_433c11 / (_163_upper_433c11 + _164_lower_433c11) * <PineFloat>::from(<PineInt>::from(100)));
_165_rvi_433c11}}}
          

struct _State_166___ultimate_oscillator_average___d379e7 {_769_series_expr_1538_src_0da3b0: PineSeries::<PineFloat>,
_769_series_expr_1538_src_0da3b0_initialized: bool,
_770_series_expr_1544_src_0da3b0: PineSeries::<PineFloat>,
_770_series_expr_1544_src_0da3b0_initialized: bool,
_771_series_expr_1538_src_0da3b0: PineSeries::<PineFloat>,
_771_series_expr_1538_src_0da3b0_initialized: bool,
_772_series_expr_1544_src_0da3b0: PineSeries::<PineFloat>,
_772_series_expr_1544_src_0da3b0_initialized: bool,
_773_series_expr_1538_src_0da3b0: PineSeries::<PineFloat>,
_773_series_expr_1538_src_0da3b0_initialized: bool,
_774_series_expr_1544_src_0da3b0: PineSeries::<PineFloat>,
_774_series_expr_1544_src_0da3b0_initialized: bool,
_775_series_expr_1538_src_0da3b0: PineSeries::<PineFloat>,
_775_series_expr_1538_src_0da3b0_initialized: bool,
_776_series_expr_1544_src_0da3b0: PineSeries::<PineFloat>,
_776_series_expr_1544_src_0da3b0_initialized: bool,
_call_1540_261_math_sum_b4673a: _State_261_math_sum_b4673a,
_call_1546_261_math_sum_b4673a: _State_261_math_sum_b4673a,}
impl runtime::Default for _State_166___ultimate_oscillator_average___d379e7 { fn default() -> _State_166___ultimate_oscillator_average___d379e7 {return _State_166___ultimate_oscillator_average___d379e7 {_769_series_expr_1538_src_0da3b0: runtime::Default::default(),
_769_series_expr_1538_src_0da3b0_initialized: runtime::Default::default(),
_770_series_expr_1544_src_0da3b0: runtime::Default::default(),
_770_series_expr_1544_src_0da3b0_initialized: runtime::Default::default(),
_771_series_expr_1538_src_0da3b0: runtime::Default::default(),
_771_series_expr_1538_src_0da3b0_initialized: runtime::Default::default(),
_772_series_expr_1544_src_0da3b0: runtime::Default::default(),
_772_series_expr_1544_src_0da3b0_initialized: runtime::Default::default(),
_773_series_expr_1538_src_0da3b0: runtime::Default::default(),
_773_series_expr_1538_src_0da3b0_initialized: runtime::Default::default(),
_774_series_expr_1544_src_0da3b0: runtime::Default::default(),
_774_series_expr_1544_src_0da3b0_initialized: runtime::Default::default(),
_775_series_expr_1538_src_0da3b0: runtime::Default::default(),
_775_series_expr_1538_src_0da3b0_initialized: runtime::Default::default(),
_776_series_expr_1544_src_0da3b0: runtime::Default::default(),
_776_series_expr_1544_src_0da3b0_initialized: runtime::Default::default(),
_call_1540_261_math_sum_b4673a: runtime::Default::default(),
_call_1546_261_math_sum_b4673a: runtime::Default::default(),};} }

impl _State_166___ultimate_oscillator_average___d379e7 {
  #[inline]
  fn next(&mut self) {
    self._769_series_expr_1538_src_0da3b0.next();
self._770_series_expr_1544_src_0da3b0.next();
self._771_series_expr_1538_src_0da3b0.next();
self._772_series_expr_1544_src_0da3b0.next();
self._773_series_expr_1538_src_0da3b0.next();
self._774_series_expr_1544_src_0da3b0.next();
self._775_series_expr_1538_src_0da3b0.next();
self._776_series_expr_1544_src_0da3b0.next();
  }
}
    

#[doc = "__ultimate_oscillator_average__(bp: float, tr_: float, length: int): float"]
fn _166___ultimate_oscillator_average___d379e7(ctx: &PineCtx, state: &mut _State_166___ultimate_oscillator_average___d379e7, _167_bp_433c11: PineFloat, _168_tr__433c11: PineFloat, _169_length_7e8107: PineInt) -> PineFloat {state.next();
let _769_series_expr_1538_src_0da3b0 = &mut state._769_series_expr_1538_src_0da3b0;
let _770_series_expr_1544_src_0da3b0 = &mut state._770_series_expr_1544_src_0da3b0;
let _771_series_expr_1538_src_0da3b0 = &mut state._771_series_expr_1538_src_0da3b0;
let _772_series_expr_1544_src_0da3b0 = &mut state._772_series_expr_1544_src_0da3b0;
let _773_series_expr_1538_src_0da3b0 = &mut state._773_series_expr_1538_src_0da3b0;
let _774_series_expr_1544_src_0da3b0 = &mut state._774_series_expr_1544_src_0da3b0;
let _775_series_expr_1538_src_0da3b0 = &mut state._775_series_expr_1538_src_0da3b0;
let _776_series_expr_1544_src_0da3b0 = &mut state._776_series_expr_1544_src_0da3b0;
{
{_261_math_sum_b4673a(&ctx, &mut state._call_1540_261_math_sum_b4673a, {{
_775_series_expr_1538_src_0da3b0.set(<PineFloat>::from(_167_bp_433c11));}
&_775_series_expr_1538_src_0da3b0}, _169_length_7e8107) / _261_math_sum_b4673a(&ctx, &mut state._call_1546_261_math_sum_b4673a, {{
_776_series_expr_1544_src_0da3b0.set(<PineFloat>::from(_168_tr__433c11));}
&_776_series_expr_1544_src_0da3b0}, _169_length_7e8107)}}}
          

struct _State_170_ultimate_oscillator_7d89ec {_176_bp_0da3b0: PineSeries::<PineFloat>,
_176_bp_0da3b0_initialized: bool,
_call_1615_166___ultimate_oscillator_average___d379e7: _State_166___ultimate_oscillator_average___d379e7,
_call_1623_166___ultimate_oscillator_average___d379e7: _State_166___ultimate_oscillator_average___d379e7,
_call_1631_166___ultimate_oscillator_average___d379e7: _State_166___ultimate_oscillator_average___d379e7,}
impl runtime::Default for _State_170_ultimate_oscillator_7d89ec { fn default() -> _State_170_ultimate_oscillator_7d89ec {return _State_170_ultimate_oscillator_7d89ec {_176_bp_0da3b0: runtime::Default::default(),
_176_bp_0da3b0_initialized: runtime::Default::default(),
_call_1615_166___ultimate_oscillator_average___d379e7: runtime::Default::default(),
_call_1623_166___ultimate_oscillator_average___d379e7: runtime::Default::default(),
_call_1631_166___ultimate_oscillator_average___d379e7: runtime::Default::default(),};} }

impl _State_170_ultimate_oscillator_7d89ec {
  #[inline]
  fn next(&mut self) {
    self._176_bp_0da3b0.next();
  }
}
    

#[doc = "ultimate_oscillator(fast_length: int, medium_length: int, slow_length: int): float"]
fn _170_ultimate_oscillator_7d89ec(ctx: &PineCtx, state: &mut _State_170_ultimate_oscillator_7d89ec, mut _171_fast_length_7e8107: PineInt, mut _172_medium_length_7e8107: PineInt, mut _173_slow_length_7e8107: PineInt, _1_high_0da3b0: &PineSeries::<PineFloat>, _3_close_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {state.next();
let _176_bp_0da3b0 = &mut state._176_bp_0da3b0;
{if runtime::Na::na(_171_fast_length_7e8107) {_171_fast_length_7e8107 = <PineInt>::from(7)}
if runtime::Na::na(_172_medium_length_7e8107) {_172_medium_length_7e8107 = <PineInt>::from(14)}
if runtime::Na::na(_173_slow_length_7e8107) {_173_slow_length_7e8107 = <PineInt>::from(28)}
{let mut _174_high__433c11: PineFloat;
_174_high__433c11 = <PineFloat>::from(_242_math_max_5b0224(&ctx, _1_high_0da3b0.get(), _3_close_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1)))));
let mut _175_low__433c11: PineFloat;
_175_low__433c11 = <PineFloat>::from(_239_math_min_ef238a(&ctx, _2_low_0da3b0.get(), _3_close_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1)))));
_176_bp_0da3b0.set(<PineFloat>::from(_3_close_0da3b0.get() - _175_low__433c11));
let mut _177_tr__433c11: PineFloat;
_177_tr__433c11 = <PineFloat>::from(_174_high__433c11 - _175_low__433c11);
let mut _178_avg7_433c11: PineFloat;
_178_avg7_433c11 = <PineFloat>::from(_166___ultimate_oscillator_average___d379e7(&ctx, &mut state._call_1615_166___ultimate_oscillator_average___d379e7, _176_bp_0da3b0.get(), _177_tr__433c11, _171_fast_length_7e8107));
let mut _179_avg14_433c11: PineFloat;
_179_avg14_433c11 = <PineFloat>::from(_166___ultimate_oscillator_average___d379e7(&ctx, &mut state._call_1623_166___ultimate_oscillator_average___d379e7, _176_bp_0da3b0.get(), _177_tr__433c11, _172_medium_length_7e8107));
let mut _180_avg28_433c11: PineFloat;
_180_avg28_433c11 = <PineFloat>::from(_166___ultimate_oscillator_average___d379e7(&ctx, &mut state._call_1631_166___ultimate_oscillator_average___d379e7, _176_bp_0da3b0.get(), _177_tr__433c11, _173_slow_length_7e8107));
let mut _181_out_433c11: PineFloat;
_181_out_433c11 = <PineFloat>::from(<PineFloat>::from(<PineInt>::from(100)) * (<PineFloat>::from(<PineInt>::from(4)) * _178_avg7_433c11 + <PineFloat>::from(<PineInt>::from(2)) * _179_avg14_433c11 + _180_avg28_433c11) / <PineFloat>::from(<PineInt>::from(7)));
_181_out_433c11}}}
          

#[doc = "math_min(x: float, y: float): float"]
fn _239_math_min_ef238a(ctx: &PineCtx, _240_x_433c11: PineFloat, _241_y_433c11: PineFloat) -> PineFloat {
{if <bool>::from(<PineBool>::from(<PineBool>::from(<bool>::from(_206_global_na_39d023(&ctx, _240_x_433c11)) | <bool>::from(_206_global_na_39d023(&ctx, _241_y_433c11))))) {<PineFloat>::from({PineNa})} else {{if <bool>::from(<PineBool>::from(_240_x_433c11 <= _241_y_433c11)) {{_240_x_433c11}} else {{_241_y_433c11}}}}}}
          

struct _State_182_volume_oscillator_e75f52 {_call_1679_609_ema_23b3fd: _State_609_ema_23b3fd,
_call_1688_609_ema_23b3fd: _State_609_ema_23b3fd,}
impl runtime::Default for _State_182_volume_oscillator_e75f52 { fn default() -> _State_182_volume_oscillator_e75f52 {return _State_182_volume_oscillator_e75f52 {_call_1679_609_ema_23b3fd: runtime::Default::default(),
_call_1688_609_ema_23b3fd: runtime::Default::default(),};} }

impl _State_182_volume_oscillator_e75f52 {
  #[inline]
  fn next(&mut self) {
    
  }
}
    

#[doc = "volume_oscillator(short_length: int, long_length: int): float"]
fn _182_volume_oscillator_e75f52(ctx: &PineCtx, state: &mut _State_182_volume_oscillator_e75f52, mut _183_short_length_7e8107: PineInt, mut _184_long_length_7e8107: PineInt, _4_volume_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {state.next();

{if runtime::Na::na(_183_short_length_7e8107) {_183_short_length_7e8107 = <PineInt>::from(5)}
if runtime::Na::na(_184_long_length_7e8107) {_184_long_length_7e8107 = <PineInt>::from(10)}
{let mut _185_short_433c11: PineFloat;
_185_short_433c11 = <PineFloat>::from(_609_ema_23b3fd(&ctx, &mut state._call_1679_609_ema_23b3fd, &_4_volume_0da3b0, _183_short_length_7e8107, <PineFloat>::from(PineNa)));
let mut _186_long_433c11: PineFloat;
_186_long_433c11 = <PineFloat>::from(_609_ema_23b3fd(&ctx, &mut state._call_1688_609_ema_23b3fd, &_4_volume_0da3b0, _184_long_length_7e8107, <PineFloat>::from(PineNa)));
let mut _187_vo_433c11: PineFloat;
_187_vo_433c11 = <PineFloat>::from((_185_short_433c11 - _186_long_433c11) / _186_long_433c11 * <PineFloat>::from(<PineInt>::from(100)));
_187_vo_433c11}}}
          

struct _State_188_vortex_indicator_0df67c {_777_series_expr_1727_src_0da3b0: PineSeries::<PineFloat>,
_777_series_expr_1727_src_0da3b0_initialized: bool,
_778_series_expr_1744_src_0da3b0: PineSeries::<PineFloat>,
_778_series_expr_1744_src_0da3b0_initialized: bool,
_779_series_expr_1757_src_0da3b0: PineSeries::<PineFloat>,
_779_series_expr_1757_src_0da3b0_initialized: bool,
_call_1729_261_math_sum_b4673a: _State_261_math_sum_b4673a,
_call_1746_261_math_sum_b4673a: _State_261_math_sum_b4673a,
_call_1759_261_math_sum_b4673a: _State_261_math_sum_b4673a,
_call_1757_652_atr_cb2705: _State_652_atr_cb2705,}
impl runtime::Default for _State_188_vortex_indicator_0df67c { fn default() -> _State_188_vortex_indicator_0df67c {return _State_188_vortex_indicator_0df67c {_777_series_expr_1727_src_0da3b0: runtime::Default::default(),
_777_series_expr_1727_src_0da3b0_initialized: runtime::Default::default(),
_778_series_expr_1744_src_0da3b0: runtime::Default::default(),
_778_series_expr_1744_src_0da3b0_initialized: runtime::Default::default(),
_779_series_expr_1757_src_0da3b0: runtime::Default::default(),
_779_series_expr_1757_src_0da3b0_initialized: runtime::Default::default(),
_call_1729_261_math_sum_b4673a: runtime::Default::default(),
_call_1746_261_math_sum_b4673a: runtime::Default::default(),
_call_1759_261_math_sum_b4673a: runtime::Default::default(),
_call_1757_652_atr_cb2705: runtime::Default::default(),};} }

impl _State_188_vortex_indicator_0df67c {
  #[inline]
  fn next(&mut self) {
    self._777_series_expr_1727_src_0da3b0.next();
self._778_series_expr_1744_src_0da3b0.next();
self._779_series_expr_1757_src_0da3b0.next();
  }
}
    

#[doc = "vortex_indicator(length: int): (float, float)"]
fn _188_vortex_indicator_0df67c(ctx: &PineCtx, state: &mut _State_188_vortex_indicator_0df67c, mut _189_length_7e8107: PineInt, _1_high_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>, _3_close_0da3b0: &PineSeries::<PineFloat>) -> (PineFloat, PineFloat) {state.next();
let _777_series_expr_1727_src_0da3b0 = &mut state._777_series_expr_1727_src_0da3b0;
let _778_series_expr_1744_src_0da3b0 = &mut state._778_series_expr_1744_src_0da3b0;
let _779_series_expr_1757_src_0da3b0 = &mut state._779_series_expr_1757_src_0da3b0;
{if runtime::Na::na(_189_length_7e8107) {_189_length_7e8107 = <PineInt>::from(14)}
{let mut _190_VMP_433c11: PineFloat;
_190_VMP_433c11 = <PineFloat>::from(_261_math_sum_b4673a(&ctx, &mut state._call_1729_261_math_sum_b4673a, {{
_777_series_expr_1727_src_0da3b0.set(<PineFloat>::from(_249_math_abs_b87bee(&ctx, _1_high_0da3b0.get() - _2_low_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1))))));}
&_777_series_expr_1727_src_0da3b0}, _189_length_7e8107));
let mut _191_VMM_433c11: PineFloat;
_191_VMM_433c11 = <PineFloat>::from(_261_math_sum_b4673a(&ctx, &mut state._call_1746_261_math_sum_b4673a, {{
_778_series_expr_1744_src_0da3b0.set(<PineFloat>::from(_249_math_abs_b87bee(&ctx, _2_low_0da3b0.get() - _1_high_0da3b0.get_at_offset(<usize>::from(<PineInt>::from(1))))));}
&_778_series_expr_1744_src_0da3b0}, _189_length_7e8107));
let mut _192_STR_433c11: PineFloat;
_192_STR_433c11 = <PineFloat>::from(_261_math_sum_b4673a(&ctx, &mut state._call_1759_261_math_sum_b4673a, {{
_779_series_expr_1757_src_0da3b0.set(<PineFloat>::from(_652_atr_cb2705(&ctx, &mut state._call_1757_652_atr_cb2705, <PineInt>::from(1), &_1_high_0da3b0, &_2_low_0da3b0, &_3_close_0da3b0)));}
&_779_series_expr_1757_src_0da3b0}, _189_length_7e8107));
let mut _193_VIP_433c11: PineFloat;
_193_VIP_433c11 = <PineFloat>::from(_190_VMP_433c11 / _192_STR_433c11);
let mut _194_VIM_433c11: PineFloat;
_194_VIM_433c11 = <PineFloat>::from(_191_VMM_433c11 / _192_STR_433c11);
(_193_VIP_433c11, _194_VIM_433c11)}}}
          

struct _State_195_williams_pct_r_fb8b2b {_200_wpctr_0da3b0: PineSeries::<PineFloat>,
_200_wpctr_0da3b0_initialized: bool,
_call_1802_599_highest_4a6663: _State_599_highest_4a6663,
_call_1810_601_lowest_66a99a: _State_601_lowest_66a99a,}
impl runtime::Default for _State_195_williams_pct_r_fb8b2b { fn default() -> _State_195_williams_pct_r_fb8b2b {return _State_195_williams_pct_r_fb8b2b {_200_wpctr_0da3b0: runtime::Default::default(),
_200_wpctr_0da3b0_initialized: runtime::Default::default(),
_call_1802_599_highest_4a6663: runtime::Default::default(),
_call_1810_601_lowest_66a99a: runtime::Default::default(),};} }

impl _State_195_williams_pct_r_fb8b2b {
  #[inline]
  fn next(&mut self) {
    self._200_wpctr_0da3b0.next();
  }
}
    

#[doc = "williams_pct_r(src: series<float>, length: int): series<float>"]
fn _195_williams_pct_r_fb8b2b(ctx: &PineCtx, state: &mut _State_195_williams_pct_r_fb8b2b, _196_src_0da3b0: &PineSeries::<PineFloat>, mut _197_length_7e8107: PineInt, _1_high_0da3b0: &PineSeries::<PineFloat>, _2_low_0da3b0: &PineSeries::<PineFloat>) -> PineFloat {state.next();
let _200_wpctr_0da3b0 = &mut state._200_wpctr_0da3b0;
{if runtime::Na::na(_197_length_7e8107) {_197_length_7e8107 = <PineInt>::from(14)}
{let mut _198_max_433c11: PineFloat;
_198_max_433c11 = <PineFloat>::from(_599_highest_4a6663(&ctx, &mut state._call_1802_599_highest_4a6663, _197_length_7e8107, &_1_high_0da3b0));
let mut _199_min_433c11: PineFloat;
_199_min_433c11 = <PineFloat>::from(_601_lowest_66a99a(&ctx, &mut state._call_1810_601_lowest_66a99a, _197_length_7e8107, &_2_low_0da3b0));
_200_wpctr_0da3b0.set(<PineFloat>::from(<PineFloat>::from(<PineInt>::from(100)) * (_196_src_0da3b0.get() - _198_max_433c11) / (_198_max_433c11 - _199_min_433c11)));
_200_wpctr_0da3b0.get()}}}
          

#[doc = "qpc_main_5239(): void"]
fn _201_qpc_main_5239_bb5984(ctx: &PineCtx) -> () {
{}}
          

#[doc = "global_na<string>(x: string): bool"]
fn _206_global_na_329fb3(ctx: &PineCtx, _208_x_b01ec9: PineString) -> PineBool {return (runtime::Na::na(_208_x_b01ec9)).into();}
          

#[doc = "global_na<bool>(x: bool): bool"]
fn _206_global_na_ee7a93(ctx: &PineCtx, _208_x_b01ec9: PineBool) -> PineBool {return (runtime::Na::na(_208_x_b01ec9)).into();}
          

#[doc = "qpc_main_7719(): void"]
fn _545_qpc_main_7719_36ea7e(ctx: &PineCtx) -> () {
{}}
use pyo3::prelude::*;
use pyo3::{
  pyfunction, pymodule, types::{PyModule, PyModuleMethods}, wrap_pyfunction, wrap_pymodule, Bound, PyResult
};
use qpace_core::ctx_py::PyCtx;
          
#[pyclass(unsendable)]struct ScriptContext__8_qpc_main_1832_6beed8 {pctx: PineCtx,
ohlcv: runtime::OhlcvSeries,}

impl ScriptContext__8_qpc_main_1832_6beed8 {
    fn new(ctx: Rc<RefCell<Ctx>>, ) -> Self {
        Self {pctx: PineCtx::new_bt(ctx.clone(), Backtest::new(ctx.clone(), BacktestConfig::default())),
ohlcv: runtime::OhlcvSeries::new(ctx.clone()),}
    }

    fn next(&mut self) {
        self.ohlcv.next();
        let _0_open_0da3b0 = &self.ohlcv.open;
let _1_high_0da3b0 = &self.ohlcv.high;
let _2_low_0da3b0 = &self.ohlcv.low;
let _3_close_0da3b0 = &self.ohlcv.close;
let _4_volume_0da3b0 = &self.ohlcv.volume;
let _5_hl2_0da3b0 = &self.ohlcv.hl2;
let _6_hlc3_0da3b0 = &self.ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &self.ohlcv.hlcc4;
        _8_qpc_main_1832_6beed8(&self.pctx);
    }
}

#[pymethods]
impl ScriptContext__8_qpc_main_1832_6beed8 {
    #[new]
#[pyo3(signature=(ctx,))]pub fn py_new(py: Python, ctx: &Bound<'_, PyAny>) -> ScriptContext__8_qpc_main_1832_6beed8 {
        let ctx = PyCtx::downcast_py(py, &ctx);
        let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();
        return ScriptContext__8_qpc_main_1832_6beed8::new(ctx,  )}
    #[pyo3(name = "collect")]pub fn py_collect(&mut self, py: Python, collect: HashSet<String>) -> HashMap<String, Py<PyAny>> {
      

      

      // for bar_index in self.pctx.ctx.clone() {
      loop {
          let bar_index = self.pctx.ctx.borrow_mut().next();
          if bar_index.is_none() {
              break;
          }
          let bar_index = bar_index.unwrap();
          self.next();
          self.pctx.bt.as_ref().map(|bt| bt.borrow_mut().on_bar_open());
          
          self.pctx.bt.as_ref().map(|bt| bt.borrow_mut().on_bar_close());
      }

      let mut values: HashMap<String, Py<PyAny>> = HashMap::new();
      

      return values;
  }

    /*
    #[pyo3(name = "get_ctx")]
    pub fn py_ctx(&self) -> Ctx {
        return self.pctx.ctx.clone();
    }
    */

    /*
    #[pyo3(name = "get_bt")]
    pub fn py_bt(&self) -> Backtest {
        return self.pctx.bt.as_ref().unwrap().replace(Backtest::new(
            self.pctx.ctx.clone(),
            BacktestConfig::default(),
        ));
    }
    */
}
    
#[pyfunction]fn py__10_accdist_11c3e8(__py: Python<'_>, ctx: &Bound<'_, PyAny>) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_10_accdist_11c3e8 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());


loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  
  let bar_res = _10_accdist_11c3e8(&pctx, &mut state, &_3_close_0da3b0, &_2_low_0da3b0, &_1_high_0da3b0, &_4_volume_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__11_cum_cda70d(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__12_src_0da3b0: PineSeries::<PineFloat>) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_11_cum_cda70d = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _12_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _12_src_0da3b0.next();
_12_src_0da3b0.set((vec__12_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _11_cum_cda70d(&pctx, &mut state, &_12_src_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__13_change_86999c(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__14_src_0da3b0: PineSeries::<PineFloat>) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _14_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _14_src_0da3b0.next();
_14_src_0da3b0.set((vec__14_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _13_change_86999c(&pctx, &_14_src_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__15_barssince_4843f8(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__16_condition_e4c4fc: PineSeries::<PineBool>) -> Vec::<PineInt> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineInt> = Vec::new();
let mut state: _State_15_barssince_4843f8 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _16_condition_e4c4fc: PineSeries::<PineBool> = runtime::Default::default();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _16_condition_e4c4fc.next();
_16_condition_e4c4fc.set((vec__16_condition_e4c4fc.get_at(bar_index)).into());
  let bar_res = _15_barssince_4843f8(&pctx, &mut state, &_16_condition_e4c4fc);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__17_roc_cada68(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__18_src_0da3b0: PineSeries::<PineFloat>, _19_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _18_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _19_length_7e8107: PineInt = _19_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _18_src_0da3b0.next();
_18_src_0da3b0.set((vec__18_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _17_roc_cada68(&pctx, &_18_src_0da3b0, _19_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__20_crossover_765544(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__21_source1_0da3b0: PineSeries::<PineFloat>, vec__22_source2_0da3b0: PineSeries::<PineFloat>) -> Vec::<PineBool> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineBool> = Vec::new();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _21_source1_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let mut _22_source2_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _21_source1_0da3b0.next();
_21_source1_0da3b0.set((vec__21_source1_0da3b0.get_at(bar_index)).into());
_22_source2_0da3b0.next();
_22_source2_0da3b0.set((vec__22_source2_0da3b0.get_at(bar_index)).into());
  let bar_res = _20_crossover_765544(&pctx, &_21_source1_0da3b0, &_22_source2_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__23_crossunder_11b1fc(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__24_source1_0da3b0: PineSeries::<PineFloat>, vec__25_source2_0da3b0: PineSeries::<PineFloat>) -> Vec::<PineBool> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineBool> = Vec::new();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _24_source1_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let mut _25_source2_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _24_source1_0da3b0.next();
_24_source1_0da3b0.set((vec__24_source1_0da3b0.get_at(bar_index)).into());
_25_source2_0da3b0.next();
_25_source2_0da3b0.set((vec__25_source2_0da3b0.get_at(bar_index)).into());
  let bar_res = _23_crossunder_11b1fc(&pctx, &_24_source1_0da3b0, &_25_source2_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__26_cross_3544aa(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__27_source1_0da3b0: PineSeries::<PineFloat>, vec__28_source2_0da3b0: PineSeries::<PineFloat>) -> Vec::<PineBool> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineBool> = Vec::new();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _27_source1_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let mut _28_source2_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _27_source1_0da3b0.next();
_27_source1_0da3b0.set((vec__27_source1_0da3b0.get_at(bar_index)).into());
_28_source2_0da3b0.next();
_28_source2_0da3b0.set((vec__28_source2_0da3b0.get_at(bar_index)).into());
  let bar_res = _26_cross_3544aa(&pctx, &_27_source1_0da3b0, &_28_source2_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__29_highestbars_dda950(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__30_src_0da3b0: PineSeries::<PineFloat>, _31_length_7e8107: PineInt) -> Vec::<PineInt> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineInt> = Vec::new();
let mut state: _State_29_highestbars_dda950 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _30_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _31_length_7e8107: PineInt = _31_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _30_src_0da3b0.next();
_30_src_0da3b0.set((vec__30_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _29_highestbars_dda950(&pctx, &mut state, &_30_src_0da3b0, _31_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__32_lowestbars_ac0c6c(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__33_src_0da3b0: PineSeries::<PineFloat>, _34_length_7e8107: PineInt) -> Vec::<PineInt> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineInt> = Vec::new();
let mut state: _State_32_lowestbars_ac0c6c = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _33_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _34_length_7e8107: PineInt = _34_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _33_src_0da3b0.next();
_33_src_0da3b0.set((vec__33_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _32_lowestbars_ac0c6c(&pctx, &mut state, &_33_src_0da3b0, _34_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__35_highest_7004c3(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__36_src_0da3b0: PineSeries::<PineFloat>, _37_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_35_highest_7004c3 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _36_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _37_length_7e8107: PineInt = _37_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _36_src_0da3b0.next();
_36_src_0da3b0.set((vec__36_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _35_highest_7004c3(&pctx, &mut state, &_36_src_0da3b0, _37_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__38_lowest_948224(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__39_src_0da3b0: PineSeries::<PineFloat>, _40_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_38_lowest_948224 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _39_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _40_length_7e8107: PineInt = _40_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _39_src_0da3b0.next();
_39_src_0da3b0.set((vec__39_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _38_lowest_948224(&pctx, &mut state, &_39_src_0da3b0, _40_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__41_swma_9bc39d(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__42_src_0da3b0: PineSeries::<PineFloat>) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _42_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _42_src_0da3b0.next();
_42_src_0da3b0.set((vec__42_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _41_swma_9bc39d(&pctx, &_42_src_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__43_sma_539698(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__44_src_0da3b0: PineSeries::<PineFloat>, _45_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_43_sma_539698 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _44_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _45_length_7e8107: PineInt = _45_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _44_src_0da3b0.next();
_44_src_0da3b0.set((vec__44_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _43_sma_539698(&pctx, &mut state, &_44_src_0da3b0, _45_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__46_ema_cda730(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__47_src_0da3b0: PineSeries::<PineFloat>, _48_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_46_ema_cda730 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _47_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _48_length_7e8107: PineInt = _48_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _47_src_0da3b0.next();
_47_src_0da3b0.set((vec__47_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _46_ema_cda730(&pctx, &mut state, &_47_src_0da3b0, _48_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__49_rma_29445f(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__50_src_0da3b0: PineSeries::<PineFloat>, _51_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_49_rma_29445f = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _50_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _51_length_7e8107: PineInt = _51_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _50_src_0da3b0.next();
_50_src_0da3b0.set((vec__50_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _49_rma_29445f(&pctx, &mut state, &_50_src_0da3b0, _51_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__52_wma_f65ce1(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__53_src_0da3b0: PineSeries::<PineFloat>, _54_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _53_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _54_length_7e8107: PineInt = _54_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _53_src_0da3b0.next();
_53_src_0da3b0.set((vec__53_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _52_wma_f65ce1(&pctx, &_53_src_0da3b0, _54_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__55_lwma_861fb5(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__56_src_0da3b0: PineSeries::<PineFloat>, _57_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _56_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _57_length_7e8107: PineInt = _57_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _56_src_0da3b0.next();
_56_src_0da3b0.set((vec__56_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _55_lwma_861fb5(&pctx, &_56_src_0da3b0, _57_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__58_hma_893fb4(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__59_src_0da3b0: PineSeries::<PineFloat>, _60_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_58_hma_893fb4 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _59_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _60_length_7e8107: PineInt = _60_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _59_src_0da3b0.next();
_59_src_0da3b0.set((vec__59_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _58_hma_893fb4(&pctx, &mut state, &_59_src_0da3b0, _60_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__61_vwma_083794(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__62_src_0da3b0: PineSeries::<PineFloat>, _63_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_61_vwma_083794 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _62_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _63_length_7e8107: PineInt = _63_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _62_src_0da3b0.next();
_62_src_0da3b0.set((vec__62_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _61_vwma_083794(&pctx, &mut state, &_62_src_0da3b0, _63_length_7e8107, &_4_volume_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__64_dev_3840e2(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__65_src_0da3b0: PineSeries::<PineFloat>, _66_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_64_dev_3840e2 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _65_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _66_length_7e8107: PineInt = _66_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _65_src_0da3b0.next();
_65_src_0da3b0.set((vec__65_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _64_dev_3840e2(&pctx, &mut state, &_65_src_0da3b0, _66_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__67_tr_6fecfd(__py: Python<'_>, ctx: &Bound<'_, PyAny>, _68_handle_na_8e45b4: PineBool) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let _68_handle_na_8e45b4: PineBool = _68_handle_na_8e45b4.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  
  let bar_res = _67_tr_6fecfd(&pctx, _68_handle_na_8e45b4, &_1_high_0da3b0, &_2_low_0da3b0, &_3_close_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__69_atr_2c80de(__py: Python<'_>, ctx: &Bound<'_, PyAny>, _70_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_69_atr_2c80de = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let _70_length_7e8107: PineInt = _70_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  
  let bar_res = _69_atr_2c80de(&pctx, &mut state, _70_length_7e8107, &_1_high_0da3b0, &_2_low_0da3b0, &_3_close_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__71_rsi_9b9849(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__72_src_0da3b0: PineSeries::<PineFloat>, _73_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_71_rsi_9b9849 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _72_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _73_length_7e8107: PineInt = _73_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _72_src_0da3b0.next();
_72_src_0da3b0.set((vec__72_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _71_rsi_9b9849(&pctx, &mut state, &_72_src_0da3b0, _73_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__74_cci_2fd7e2(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__75_src_0da3b0: PineSeries::<PineFloat>, _76_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_74_cci_2fd7e2 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _75_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _76_length_7e8107: PineInt = _76_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _75_src_0da3b0.next();
_75_src_0da3b0.set((vec__75_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _74_cci_2fd7e2(&pctx, &mut state, &_75_src_0da3b0, _76_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__77_aroon_dc49ff(__py: Python<'_>, ctx: &Bound<'_, PyAny>, _78_length_7e8107: PineInt) -> Vec::<(PineFloat, PineFloat)> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<(PineFloat, PineFloat)> = Vec::new();
let mut state: _State_77_aroon_dc49ff = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let _78_length_7e8107: PineInt = _78_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  
  let bar_res = _77_aroon_dc49ff(&pctx, &mut state, _78_length_7e8107, &_1_high_0da3b0, &_2_low_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__79_supertrend_d7065b(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__80_src_0da3b0: PineSeries::<PineFloat>, _81_factor_433c11: PineFloat, _82_atr_period_7e8107: PineInt) -> Vec::<(PineFloat, PineInt)> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<(PineFloat, PineInt)> = Vec::new();
let mut state: _State_79_supertrend_d7065b = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _80_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _81_factor_433c11: PineFloat = _81_factor_433c11.into();
let _82_atr_period_7e8107: PineInt = _82_atr_period_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _80_src_0da3b0.next();
_80_src_0da3b0.set((vec__80_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _79_supertrend_d7065b(&pctx, &mut state, &_80_src_0da3b0, _81_factor_433c11, _82_atr_period_7e8107, &_3_close_0da3b0, &_1_high_0da3b0, &_2_low_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__83_awesome_oscillator_c4b143(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__84_src_0da3b0: PineSeries::<PineFloat>, _85_slow_length_7e8107: PineInt, _86_fast_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_83_awesome_oscillator_c4b143 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _84_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _85_slow_length_7e8107: PineInt = _85_slow_length_7e8107.into();
let _86_fast_length_7e8107: PineInt = _86_fast_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _84_src_0da3b0.next();
_84_src_0da3b0.set((vec__84_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _83_awesome_oscillator_c4b143(&pctx, &mut state, &_84_src_0da3b0, _85_slow_length_7e8107, _86_fast_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__89_balance_of_power_c36d50(__py: Python<'_>, ctx: &Bound<'_, PyAny>) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());


loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  
  let bar_res = _89_balance_of_power_c36d50(&pctx, &_3_close_0da3b0, &_0_open_0da3b0, &_1_high_0da3b0, &_2_low_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__90_bollinger_bands_pct_b_cf0090(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__91_src_0da3b0: PineSeries::<PineFloat>, _92_length_7e8107: PineInt, _93_mult_433c11: PineFloat) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_90_bollinger_bands_pct_b_cf0090 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _91_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _92_length_7e8107: PineInt = _92_length_7e8107.into();
let _93_mult_433c11: PineFloat = _93_mult_433c11.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _91_src_0da3b0.next();
_91_src_0da3b0.set((vec__91_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _90_bollinger_bands_pct_b_cf0090(&pctx, &mut state, &_91_src_0da3b0, _92_length_7e8107, _93_mult_433c11);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__99_bollinger_bands_width_935a52(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__100_src_0da3b0: PineSeries::<PineFloat>, _101_length_7e8107: PineInt, _102_mult_433c11: PineFloat) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_99_bollinger_bands_width_935a52 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _100_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _101_length_7e8107: PineInt = _101_length_7e8107.into();
let _102_mult_433c11: PineFloat = _102_mult_433c11.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _100_src_0da3b0.next();
_100_src_0da3b0.set((vec__100_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _99_bollinger_bands_width_935a52(&pctx, &mut state, &_100_src_0da3b0, _101_length_7e8107, _102_mult_433c11);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__108_bollinger_bands_e0db10(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__109_src_0da3b0: PineSeries::<PineFloat>, _110_length_7e8107: PineInt, _111_mult_433c11: PineFloat) -> Vec::<(PineFloat, PineFloat)> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<(PineFloat, PineFloat)> = Vec::new();
let mut state: _State_108_bollinger_bands_e0db10 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _109_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _110_length_7e8107: PineInt = _110_length_7e8107.into();
let _111_mult_433c11: PineFloat = _111_mult_433c11.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _109_src_0da3b0.next();
_109_src_0da3b0.set((vec__109_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _108_bollinger_bands_e0db10(&pctx, &mut state, &_109_src_0da3b0, _110_length_7e8107, _111_mult_433c11);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__116_chaikin_money_flow_93bd54(__py: Python<'_>, ctx: &Bound<'_, PyAny>, _117_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_116_chaikin_money_flow_93bd54 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let _117_length_7e8107: PineInt = _117_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  
  let bar_res = _116_chaikin_money_flow_93bd54(&pctx, &mut state, _117_length_7e8107, &_4_volume_0da3b0, &_3_close_0da3b0, &_1_high_0da3b0, &_2_low_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__121_chande_kroll_stop_b9c264(__py: Python<'_>, ctx: &Bound<'_, PyAny>, _122_atr_length_7e8107: PineInt, _123_atr_coeff_433c11: PineFloat, _124_stop_length_7e8107: PineInt) -> Vec::<(PineFloat, PineFloat)> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<(PineFloat, PineFloat)> = Vec::new();
let mut state: _State_121_chande_kroll_stop_b9c264 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let _122_atr_length_7e8107: PineInt = _122_atr_length_7e8107.into();
let _123_atr_coeff_433c11: PineFloat = _123_atr_coeff_433c11.into();
let _124_stop_length_7e8107: PineInt = _124_stop_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  
  let bar_res = _121_chande_kroll_stop_b9c264(&pctx, &mut state, _122_atr_length_7e8107, _123_atr_coeff_433c11, _124_stop_length_7e8107, &_1_high_0da3b0, &_2_low_0da3b0, &_3_close_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__132_choppiness_index_b9a78e(__py: Python<'_>, ctx: &Bound<'_, PyAny>, _133_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_132_choppiness_index_b9a78e = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let _133_length_7e8107: PineInt = _133_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  
  let bar_res = _132_choppiness_index_b9a78e(&pctx, &mut state, _133_length_7e8107, &_1_high_0da3b0, &_2_low_0da3b0, &_3_close_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__134_coppock_curve_e71b71(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__135_src_0da3b0: PineSeries::<PineFloat>, _136_wma_length_7e8107: PineInt, _137_long_roc_length_7e8107: PineInt, _138_short_roc_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_134_coppock_curve_e71b71 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _135_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _136_wma_length_7e8107: PineInt = _136_wma_length_7e8107.into();
let _137_long_roc_length_7e8107: PineInt = _137_long_roc_length_7e8107.into();
let _138_short_roc_length_7e8107: PineInt = _138_short_roc_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _135_src_0da3b0.next();
_135_src_0da3b0.set((vec__135_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _134_coppock_curve_e71b71(&pctx, &mut state, &_135_src_0da3b0, _136_wma_length_7e8107, _137_long_roc_length_7e8107, _138_short_roc_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__139_donchian_channel_a4ae4b(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__140_src_0da3b0: PineSeries::<PineFloat>, _141_length_7e8107: PineInt) -> Vec::<(PineFloat, PineFloat, PineFloat)> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<(PineFloat, PineFloat, PineFloat)> = Vec::new();
let mut state: _State_139_donchian_channel_a4ae4b = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _140_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _141_length_7e8107: PineInt = _141_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _140_src_0da3b0.next();
_140_src_0da3b0.set((vec__140_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _139_donchian_channel_a4ae4b(&pctx, &mut state, &_140_src_0da3b0, _141_length_7e8107, &_2_low_0da3b0, &_1_high_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__145_macd_464af1(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__146_src_0da3b0: PineSeries::<PineFloat>, _147_short_length_7e8107: PineInt, _148_long_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_145_macd_464af1 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _146_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _147_short_length_7e8107: PineInt = _147_short_length_7e8107.into();
let _148_long_length_7e8107: PineInt = _148_long_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _146_src_0da3b0.next();
_146_src_0da3b0.set((vec__146_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _145_macd_464af1(&pctx, &mut state, &_146_src_0da3b0, _147_short_length_7e8107, _148_long_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__150_price_oscillator_19a52e(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__151_src_0da3b0: PineSeries::<PineFloat>, _152_short_length_7e8107: PineInt, _153_long_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_150_price_oscillator_19a52e = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _151_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _152_short_length_7e8107: PineInt = _152_short_length_7e8107.into();
let _153_long_length_7e8107: PineInt = _153_long_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _151_src_0da3b0.next();
_151_src_0da3b0.set((vec__151_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _150_price_oscillator_19a52e(&pctx, &mut state, &_151_src_0da3b0, _152_short_length_7e8107, _153_long_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__157_relative_vigor_index_9b77cb(__py: Python<'_>, ctx: &Bound<'_, PyAny>, _158_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_157_relative_vigor_index_9b77cb = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let _158_length_7e8107: PineInt = _158_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  
  let bar_res = _157_relative_vigor_index_9b77cb(&pctx, &mut state, _158_length_7e8107, &_3_close_0da3b0, &_0_open_0da3b0, &_1_high_0da3b0, &_2_low_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__159_relative_volatility_index_6e8c65(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__160_src_0da3b0: PineSeries::<PineFloat>, _161_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_159_relative_volatility_index_6e8c65 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _160_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _161_length_7e8107: PineInt = _161_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _160_src_0da3b0.next();
_160_src_0da3b0.set((vec__160_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _159_relative_volatility_index_6e8c65(&pctx, &mut state, &_160_src_0da3b0, _161_length_7e8107);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__170_ultimate_oscillator_7d89ec(__py: Python<'_>, ctx: &Bound<'_, PyAny>, _171_fast_length_7e8107: PineInt, _172_medium_length_7e8107: PineInt, _173_slow_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_170_ultimate_oscillator_7d89ec = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let _171_fast_length_7e8107: PineInt = _171_fast_length_7e8107.into();
let _172_medium_length_7e8107: PineInt = _172_medium_length_7e8107.into();
let _173_slow_length_7e8107: PineInt = _173_slow_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  
  let bar_res = _170_ultimate_oscillator_7d89ec(&pctx, &mut state, _171_fast_length_7e8107, _172_medium_length_7e8107, _173_slow_length_7e8107, &_1_high_0da3b0, &_3_close_0da3b0, &_2_low_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__182_volume_oscillator_e75f52(__py: Python<'_>, ctx: &Bound<'_, PyAny>, _183_short_length_7e8107: PineInt, _184_long_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_182_volume_oscillator_e75f52 = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let _183_short_length_7e8107: PineInt = _183_short_length_7e8107.into();
let _184_long_length_7e8107: PineInt = _184_long_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  
  let bar_res = _182_volume_oscillator_e75f52(&pctx, &mut state, _183_short_length_7e8107, _184_long_length_7e8107, &_4_volume_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__188_vortex_indicator_0df67c(__py: Python<'_>, ctx: &Bound<'_, PyAny>, _189_length_7e8107: PineInt) -> Vec::<(PineFloat, PineFloat)> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<(PineFloat, PineFloat)> = Vec::new();
let mut state: _State_188_vortex_indicator_0df67c = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let _189_length_7e8107: PineInt = _189_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  
  let bar_res = _188_vortex_indicator_0df67c(&pctx, &mut state, _189_length_7e8107, &_1_high_0da3b0, &_2_low_0da3b0, &_3_close_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pyfunction]fn py__195_williams_pct_r_fb8b2b(__py: Python<'_>, ctx: &Bound<'_, PyAny>, vec__196_src_0da3b0: PineSeries::<PineFloat>, _197_length_7e8107: PineInt) -> Vec::<PineFloat> {
let ctx = PyCtx::downcast_py(__py, ctx);
let ctx: Rc<RefCell<Ctx>> = ctx.inner().clone();

let mut res: Vec::<PineFloat> = Vec::new();
let mut state: _State_195_williams_pct_r_fb8b2b = runtime::Default::default();

let pctx = PineCtx::new(ctx.clone());
let mut ohlcv = runtime::OhlcvSeries::new(ctx.clone());
let mut _196_src_0da3b0: PineSeries::<PineFloat> = runtime::Default::default();
let _197_length_7e8107: PineInt = _197_length_7e8107.into();

loop {
  let bar_index = pctx.ctx.borrow_mut().next();
  if bar_index.is_none() {
    break;
  }
  let bar_index = bar_index.unwrap();
  ohlcv.next();
  let _0_open_0da3b0 = &ohlcv.open;
let _1_high_0da3b0 = &ohlcv.high;
let _2_low_0da3b0 = &ohlcv.low;
let _3_close_0da3b0 = &ohlcv.close;
let _4_volume_0da3b0 = &ohlcv.volume;
let _5_hl2_0da3b0 = &ohlcv.hl2;
let _6_hlc3_0da3b0 = &ohlcv.hlc3;
let _7_hlcc4_0da3b0 = &ohlcv.hlcc4;
  _196_src_0da3b0.next();
_196_src_0da3b0.set((vec__196_src_0da3b0.get_at(bar_index)).into());
  let bar_res = _195_williams_pct_r_fb8b2b(&pctx, &mut state, &_196_src_0da3b0, _197_length_7e8107, &_1_high_0da3b0, &_2_low_0da3b0);
  res.push(bar_res.into());
}
          
return res;}
#[pymodule(name = "qpace_content")]pub fn py_mod_qpace_content(m: &Bound<'_, PyModule>) -> PyResult<()> {m.add_wrapped(wrap_pyfunction!(py__10_accdist_11c3e8))?;
m.add_wrapped(wrap_pyfunction!(py__11_cum_cda70d))?;
m.add_wrapped(wrap_pyfunction!(py__13_change_86999c))?;
m.add_wrapped(wrap_pyfunction!(py__15_barssince_4843f8))?;
m.add_wrapped(wrap_pyfunction!(py__17_roc_cada68))?;
m.add_wrapped(wrap_pyfunction!(py__20_crossover_765544))?;
m.add_wrapped(wrap_pyfunction!(py__23_crossunder_11b1fc))?;
m.add_wrapped(wrap_pyfunction!(py__26_cross_3544aa))?;
m.add_wrapped(wrap_pyfunction!(py__29_highestbars_dda950))?;
m.add_wrapped(wrap_pyfunction!(py__32_lowestbars_ac0c6c))?;
m.add_wrapped(wrap_pyfunction!(py__35_highest_7004c3))?;
m.add_wrapped(wrap_pyfunction!(py__38_lowest_948224))?;
m.add_wrapped(wrap_pyfunction!(py__41_swma_9bc39d))?;
m.add_wrapped(wrap_pyfunction!(py__43_sma_539698))?;
m.add_wrapped(wrap_pyfunction!(py__46_ema_cda730))?;
m.add_wrapped(wrap_pyfunction!(py__49_rma_29445f))?;
m.add_wrapped(wrap_pyfunction!(py__52_wma_f65ce1))?;
m.add_wrapped(wrap_pyfunction!(py__55_lwma_861fb5))?;
m.add_wrapped(wrap_pyfunction!(py__58_hma_893fb4))?;
m.add_wrapped(wrap_pyfunction!(py__61_vwma_083794))?;
m.add_wrapped(wrap_pyfunction!(py__64_dev_3840e2))?;
m.add_wrapped(wrap_pyfunction!(py__67_tr_6fecfd))?;
m.add_wrapped(wrap_pyfunction!(py__69_atr_2c80de))?;
m.add_wrapped(wrap_pyfunction!(py__71_rsi_9b9849))?;
m.add_wrapped(wrap_pyfunction!(py__74_cci_2fd7e2))?;
m.add_wrapped(wrap_pyfunction!(py__77_aroon_dc49ff))?;
m.add_wrapped(wrap_pyfunction!(py__79_supertrend_d7065b))?;
m.add_wrapped(wrap_pyfunction!(py__83_awesome_oscillator_c4b143))?;
m.add_wrapped(wrap_pyfunction!(py__89_balance_of_power_c36d50))?;
m.add_wrapped(wrap_pyfunction!(py__90_bollinger_bands_pct_b_cf0090))?;
m.add_wrapped(wrap_pyfunction!(py__99_bollinger_bands_width_935a52))?;
m.add_wrapped(wrap_pyfunction!(py__108_bollinger_bands_e0db10))?;
m.add_wrapped(wrap_pyfunction!(py__116_chaikin_money_flow_93bd54))?;
m.add_wrapped(wrap_pyfunction!(py__121_chande_kroll_stop_b9c264))?;
m.add_wrapped(wrap_pyfunction!(py__132_choppiness_index_b9a78e))?;
m.add_wrapped(wrap_pyfunction!(py__134_coppock_curve_e71b71))?;
m.add_wrapped(wrap_pyfunction!(py__139_donchian_channel_a4ae4b))?;
m.add_wrapped(wrap_pyfunction!(py__145_macd_464af1))?;
m.add_wrapped(wrap_pyfunction!(py__150_price_oscillator_19a52e))?;
m.add_wrapped(wrap_pyfunction!(py__157_relative_vigor_index_9b77cb))?;
m.add_wrapped(wrap_pyfunction!(py__159_relative_volatility_index_6e8c65))?;
m.add_wrapped(wrap_pyfunction!(py__170_ultimate_oscillator_7d89ec))?;
m.add_wrapped(wrap_pyfunction!(py__182_volume_oscillator_e75f52))?;
m.add_wrapped(wrap_pyfunction!(py__188_vortex_indicator_0df67c))?;
m.add_wrapped(wrap_pyfunction!(py__195_williams_pct_r_fb8b2b))?;
m.add_class::<ScriptContext__8_qpc_main_1832_6beed8>()?;
Ok(())}
