const { readFileSync, writeFileSync, mkdirSync } = require("fs");
const { resolve } = require("path");

fileSet("py_src", {
  srcs: [glob("**/*.py")],
  deps: ["//core", "//lib/content"],
});

fileSet("ts_proto", {
  srcs: [glob("proto/*.{ts,js}")],
});

fileSet("examples", {
  srcs: [glob("examples/**/*.pine"), glob("examples/**/*.py")],
});

tsLibrary("wasm", {
  srcs: [
    "client.ts",
    "compiler.ts",
    "index.ts",
    "internal.ts",
    "examples/index.ts",
  ],
  deps: [":ts_proto", "//core:wasm", "//:package_json", ":examples"],
  compiler: "tsc",
});

fileSet("py", {
  deps: [":py_src"],
});

const MANIFEST_IN = `
include README.md
include LICENSE.md
include lib/*
include lib/xd/*
include qpace_core/*
include qpace_content/*
`;
// .replaceAll("\n", "\\n");

// python -m twine upload *
const GET_SETUP_PY = (ctx) => {
  const packageJson = JSON.parse(
    readFileSync(resolve(ctx.workspacePath, "package.json"), "utf8"),
  );
  return `
from setuptools import setup, find_packages

local_packages = [
  *find_packages("lib"),
  "qpace",
]
print(local_packages)

setup(
    name="qpace",
    version="${packageJson.version}",
    package_dir={
        "": "lib",
        "qpace": "lib",
        "qpace_core": "lib/qpace_core",
        "qpace_content": "lib/qpace_content",
    },
    packages=[*local_packages],
    package_data={
        "qpace_core": ["qpace_core.pyd", "qpace_core.abi3.so"],
        "qpace_content": ["qpace_content.pyd", "qpace_content.abi3.so"],
    },
    include_package_data=True,
    python_requires=">=3.10",
    install_requires=[
        "numpy",
        "pandas",
        "matplotlib",
        "scikit-learn",
        "requests",
        "tqdm",
        "plotly",
        "grpcio==1.70.0",
        "protobuf==5.29.1",
    ],
    # platforms=["win_amd64"],
)

`;
  // .replaceAll("\n", "\\n")
  // .replaceAll(`"`, `""`);
};

const PYPROJECT_TOML = `
[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"
`;
// .replaceAll("\n", "\\n")
// .replaceAll(`"`, `""`);

unpackWheel(`maturin_unwheel_core`, (ctx) => ({
  deps: ["//core:maturin"],
  dir: ctx.sandboxPath,
}));

unpackWheel(`maturin_unwheel_content`, (ctx) => ({
  deps: ["//lib/content:maturin"],
  dir: ctx.sandboxPath,
}));

execute("wheel", (ctx) => {
  mkdirSync(resolve(ctx.sandboxPath), { recursive: true });
  // console.log("XDDDD", resolve(ctx.sandboxPath))
  writeFileSync(
    resolve(ctx.sandboxPath, "../MANIFEST.in"),
    MANIFEST_IN,
    "utf8",
  );
  writeFileSync(
    resolve(ctx.sandboxPath, "../setup.py"),
    GET_SETUP_PY(ctx),
    "utf8",
  );
  writeFileSync(
    resolve(ctx.sandboxPath, "../pyproject.toml"),
    PYPROJECT_TOML,
    "utf8",
  );
  return {
    command: [
      // "cp ../MANIFEST.in .",
      // "cp ../setup.py .",
      // "cp ../pyproject.toml .",
      "copy ..\\MANIFEST.in .",
      "copy ..\\setup.py .",
      "copy ..\\pyproject.toml .",
      // copy from ../ctx.sandboxPath to here
      // `node -e "require('fs').writeFileSync('MANIFEST.in', '${MANIFEST_IN.replaceAll(
      //   "\n",
      //   "\\n",
      // ).replaceAll(`"`, `""`)}')"`,
      // `node -e "require('fs').writeFileSync('setup.py', '${GET_SETUP_PY(
      //   ctx,
      // ).replaceAll(`"`, `""`)}.replaceAll("\n", "\\n")')"`,
      // `node -e "require('fs').writeFileSync('pyproject.toml', '${PYPROJECT_TOML.replaceAll(
      //   "\n",
      //   "\\n",
      // ).replaceAll(`"`, `""`)}')"`,
      // `python setup.py bdist_wheel --plat-name win_amd64`,
      // macos arm
      // `python setup.py bdist_wheel --plat-name win_amd64`,
      // `python setup.py bdist_wheel --plat-name macosx_11_0_arm64`,
      `python setup.py bdist_wheel --plat-name linux_x86_64`,
    ].join(" && "),
    cwd: ctx.sandboxPath,
    deps: [
      ":py_src",
      "//:package_json",
      ":maturin_unwheel_core",
      ":maturin_unwheel_content",
    ],
    run: true,
  };
});

execute("npm_link", (ctx) => ({
  command: `cd ${ctx.sandboxPath} && pnpm link --global`,
  copyDeps: true,
  deps: [
    ":wasm",
    // ":package_json_prod",
    ":cli_main",
    ":cli_src",
  ],
  run: true,
}));

execute("npm_publish", (ctx) => ({
  // echo "#!/usr/bin/env node\\n" | cat - ./lib/cli.bazed.js
  command: `node -e "const fs = require('fs'); const path = require('path').resolve('./cli.bazed.js'); fs.writeFileSync(path, '#!/usr/bin/env node\\n' + fs.readFileSync(path, 'utf8'), 'utf8');" && cd ${ctx.sandboxPath} && rimraf core/pkg/.gitignore && npm publish --access public --force --dry-run`, //  --dry-run
  copyDeps: true,
  deps: [
    ":wasm",
    // ":package_json_prod",
    ":cli_main",
    ":cli_src",
  ],
  run: true,
}));

tsLibrary("cli_src", {
  srcs: ["remote_driver.ts", "cli.ts"],
  deps: ["//base/node", ":wasm"],
});

nodeEntry("cli", {
  main: "cli.js",
  deps: [":cli_src"],
});

nodeMainWrapper(`cli_main`, {
  main: "cli.js",
  output: "cli.bazed.js",
});

// python3 -m twine upload

// export TWINE_USERNAME=
// export TWINE_PASSWORD=
