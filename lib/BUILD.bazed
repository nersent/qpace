const { readFileSync } = require("fs");
const { resolve } = require("path");

fileSet("py_src", {
  srcs: [glob("**/*.py")],
  deps: ["//core", "//lib/content"],
});

fileSet("ts_proto", {
  srcs: [glob("proto/*.{ts,js}")],
});

tsLibrary("wasm", {
  srcs: ["client.ts", "compiler.ts", "index.ts", "internal.ts"],
  deps: [":ts_proto", "//core:wasm", "//:package_json"],
  compiler: "tsc",
});

fileSet("py", {
  deps: [":py_src"],
});

const MANIFEST_IN = `
include README.md
include LICENSE.md
include lib/*
include lib/xd/*
include qpace_core/*
include qpace_content/*
`.replaceAll("\n", "\\n");

// python -m twine upload *
const GET_SETUP_PY = (ctx) => {
  const packageJson = JSON.parse(
    readFileSync(resolve(ctx.workspacePath, "package.json"), "utf8"),
  );
  return `
from setuptools import setup, find_packages

local_packages = [
  *find_packages("lib"),
  "qpace",
]
print(local_packages)

setup(
    name="qpace",
    version="${packageJson.version}",
    package_dir={
        "": "lib",
        "qpace": "lib",
        "qpace_core": "lib/qpace_core",
        "qpace_content": "lib/qpace_content",
    },
    packages=[*local_packages],
    package_data={
        "qpace_core": ["qpace_core.pyd"],
        "qpace_content": ["qpace_content.pyd"],
    },
    include_package_data=True,
    python_requires=">=3.10",
    install_requires=[
        "numpy",
        "pandas",
        "matplotlib",
        "scikit-learn",
        "requests",
        "tqdm",
        "plotly",
    ],
    # platforms=["win_amd64"],
)

`
    .replaceAll("\n", "\\n")
    .replaceAll(`"`, `""`);
};

const PYPROJECT_TOML = `
[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"
`
  .replaceAll("\n", "\\n")
  .replaceAll(`"`, `""`);

unpackWheel(`maturin_unwheel_core`, (ctx) => ({
  deps: ["//core:maturin"],
  dir: ctx.sandboxPath,
}));

unpackWheel(`maturin_unwheel_content`, (ctx) => ({
  deps: ["//lib/content:maturin"],
  dir: ctx.sandboxPath,
}));

execute("wheel", (ctx) => ({
  command: [
    `node -e "require('fs').writeFileSync('MANIFEST.in', '${MANIFEST_IN}')"`,
    `node -e "require('fs').writeFileSync('setup.py', '${GET_SETUP_PY(ctx)}')"`,
    `node -e "require('fs').writeFileSync('pyproject.toml', '${PYPROJECT_TOML}')"`,
    `python setup.py bdist_wheel --plat-name win_amd64`,
  ].join(" && "),
  cwd: ctx.sandboxPath,
  deps: [
    ":py_src",
    "//:package_json",
    ":maturin_unwheel_core",
    ":maturin_unwheel_content",
  ],
  run: true,
}));

execute("npm_link", (ctx) => ({
  command: `cd ${ctx.sandboxPath} && pnpm link --global`,
  copyDeps: true,
  deps: [
    ":wasm",
    // ":package_json_prod",
    ":cli_main",
    ":cli_src",
  ],
  run: true,
}));

execute("npm_publish", (ctx) => ({
  command: `cd ${ctx.sandboxPath} && rimraf core/pkg/.gitignore && npm publish --access public --force`, //  --dry-run
  copyDeps: true,
  deps: [
    ":wasm",
    // ":package_json_prod",
    ":cli_main",
    ":cli_src",
  ],
  run: true,
}));

tsLibrary("cli_src", {
  srcs: ["remote_driver.ts", "cli.ts"],
  deps: ["//base/node", ":wasm"],
});

nodeEntry("cli", {
  main: "cli.js",
  deps: [":cli_src"],
});

nodeMainWrapper(`cli_main`, {
  main: "cli.js",
  output: "cli.bazed.js",
});
